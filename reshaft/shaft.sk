options:
	shaft: &8[&6&lRe&e&lSHAFT&7²&8]&f
	discord: &8[&e&lDISCORD&8]&f
	broadcast: &8[&e&lBROADCAST&8]&f
	rule: &8[&e&lRULE&8]&f
	permission: &7Insufficient Permissions
	coins: &7Insufficient &eCoins
	wrath: &7Insufficient &bWrath
	staff: &8[&e&lSTAFF&8]&f
	admin: &8[&6&lADMIN&8]&f
	world: world

on hunger meter change:
	cancel event
on portal create: 
	if group of player is not "admin":
		cancel event
on drop:
    if group of player is not "admin":
        cancel event
on place:
	if group of player is not "admin":
		cancel event
on pickup:
	cancel event
on item damage: 
	# if durability of event-item is greater than 2029:
	# 	broadcast "%durability of player's tool%"
	# 	cancel event
	# else if item is axe:
	# 	stop
	# else if item is pickaxe:
	# 	stop
	# else if item is shovel:
	# 	stop
	cancel event
on shoot:
	set {_p} to held item of shooter
	# if {_p} is trident:
	# 	set slot 5 of shooter to {_p}
	if projectile is set:
		set slot 16 of shooter to 64 of arrow named "&e&lQUIVER" with lore " &8╹ &7Click to Open"

on connect:
	broadcast "&8[&a+&8] &7%player%"
on disconnect:
	broadcast "&8[&c-&8] &7%player%"
on first join:
	broadcast "&8[&a+&8] &e%player% &8[&f##%size of all offline players%&8]"

command /spawn:
	trigger:
		teleport player to {spawn}

command /setspawn:
	trigger:
		if player is op:
			set {spawn} to player's position
			send "{@admin} Spawn Set to %player's position%"
		else:
			send "{@admin} {@permission}"

every 10 minutes in "{@world}":
	loop all players:
		message "{@discord} &7Join our &eDiscord &7for events, updates, and extra features (offline bonuses) <tooltip:&6Click to join!><link:https://discord.gg/y333BGhxFP>&8[&6&lCLICK HERE&8]<reset>" to loop-player

command /tps:
	trigger:
		set {_tps} to tps from the last 1 minute
		set {_t} to roundto({_tps}, 2)
		if {_t} >= 19:
			send "{@shaft} &a%{_t}% &7TPS"
		else if {_t} >= 16:
			send "{@shaft} &e%{_t}% &7TPS"
		else:
			send "{@shaft} &c%{_t}% &7TPS"

command /bc [<text>]:
	aliases: /broadcast
	trigger:
		if player is op:
			if arg-1 is set:
				broadcast colored "{@broadcast} &6%arg-1%"
			else:
				send "{@admin} /bc <msg>"
		else:
			send "{@admin} {@permission}"

command /rules: 
	trigger:
		send "{@rule} &e1. &fNo NSFW. Limit swearing."
		send "{@rule} &e2. &fEnglish only"
		send "{@rule} &e3. &fDon't spam/flood. Limit caps. "
		send "{@rule} &e4. &fRespect everyone"
		send "{@rule} &e5. &fNo advertising"
		send "{@rule} &e6. &fDon't start drama"
		send "{@rule} &e7. &fNo bugs, exploits, hacks, macros, or any unfair advantages"
		send "{@rule} &e8. &fDon't be rude, racist, or bully others"

command /pl:
	aliases: /plugins
	trigger:
		if group of player is "admin":
			execute player command "/bukkit:plugins"
		else:
			send "&fPlugins (4): &aNone&f, &aOf&f, &aYour&f, &aBusiness"

command /pvp:
	trigger:
		if {pvp::%player%} is not set:
			set {pvp::%player%} to false
			send "{@shaft} &7PvP &c&lDISABLED"
		else:
			delete {pvp::%player%}
			send "{@shaft} &7PvP &a&lENABLED."

# ==== ALTERNATIVE DEATH ====

every 5 tick:
	loop all players:
		if {staffchat::%loop-player%} is not set:
			set action bar of loop-player to "&c%{p_health::%loop-player%}%/%{p_maxhealth::%loop-player%}% ❤ &8| &7%{p_defense::%loop-player%}%/%{p_maxdefense::%loop-player%}% def &8| &c+%{p_damage::%loop-player%}% dmg"
		if {dead.%loop-player%} is set:
			teleport loop-player to {spawn}

function death(p: player):
	set gamemode of {_p} to spectator
	set {dead.%{_p}%} to true
	apply blindness of tier 255 to {_p} for 7 seconds
	apply weakness of tier 255 to {_p} for 7 seconds
	apply slowness of tier 255 to {_p} for 7 seconds
	apply wither of tier 255 to {_p} for 7 seconds
	set {_time} to 6
	send {_p} title "&c&lYOU DIED" with subtitle "&7You lost &e50%% &7 of your coins" for 3 seconds
	set {_half} to {p_coins::%{_p}%} / 2
	remove {_half} from {p_coins::%{_p}%}
	wait 3 second
	loop 5 times:
		remove 1 from {_time}
		send {_p} title "&8Grim: &7Welcome back ☠" with subtitle "&cRespawn in: %{_time}%s" for 1 second
		wait 1 second
	teleport {_p} to {spawn}
	set {p_health::%{_p}%} to {p_maxhealth::%{_p}%}
	set {p_defense::%{_p}%} to {p_maxdefense::%{_p}%}
	delete {dead.%{_p}%}
	set gamemode of {_p} to survival

function deathEffect(e: entity):
	set {_x} to x-coordinate of {_e}
	set {_y} to y-coordinate of {_e}
	set {_z} to z-coordinate of {_e}
	execute console command "/particle crit %{_x}% %{_y}% %{_z}% 0.3 0.3 0.3 1 100"
	execute console command "/particle damage_indicator %{_x}% %{_y}% %{_z}% 0.2 1.2 0.2 0 8"

on damage:
	set damage to 0
	if {dead.%{victim}%} is set:
		cancel event
	if attacker is a player:
		victim is a player
		{pvp::%victim%} is set
		cancel event
		set action bar of attacker to "{@shaft} &7PvP is &c&lDISABLED &7 for %victim%"
		stop
	if attacker is set:
		attacker is a player
		victim is a player
		{pvp::%attacker%} is set
		cancel event
		set action bar of attacker to "{@shaft} &7Your PvP is &c&lDISABLED"
		stop
	if victim is not a player:
		if attacker is not a player:
			cancel event
		else:
			remove {p_damage::%attacker%} from {m_health::%victim%}
			set {_name::*} to name of victim split at " "
			set name of victim to "%{_name::1}% %{_name::2}% &7(&c%{m_health::%victim%}%&c/%{m_maxhealth::%victim%}% ❤&7)"
			# damage counter
			set {_location} to random element out of blocks in radius 1 of victim
			add 3 to {_location}'s y-coordinate
			create holo object "&c-%{p_damage::%attacker%}%" with id "damage.%{_location}%" at {_location}
			wait 1 second
			delete holo object "damage.%{_location}%"
		if {m_health::%victim%} is less than 1:
			attacker is a player
			deathEffect(victim)
			delete victim
			add 1 to {p_mkill::%attacker%}
			delete {m_maxhealth::%victim%}
			delete {m_health::%victim%}
			delete {m_damage::%victim%}
	if victim is a player:
		if victim is blocking with a shield:
			cancel event
			set {_shield} to slot 40 of victim
			set slot 40 of victim to air
			wait 0.7 second
			set slot 40 of victim to {_shield}
		# else if damage was caused by thorns:
		# 	if {p_defense::%victim%} is greater than 0:
		# 		remove 1 from {p_defense::%victim%}
		# 	else:
		# 		remove 1 from {p_health::%victim%}
		# 	stop
		else if {p_defense::%victim%} is greater than 0:
			remove {m_damage::%attacker%} from {p_defense::%victim%}
			stop
		if attacker is player:
			remove {p_damage::%attacker%} from {p_health::%victim%}
		if attacker is not a player:
			remove {m_damage::%attacker%} from {p_health::%victim%}
		if {p_health::%victim%} is less than 1:
			death(victim)
			cancel event
			if attacker is not a player:
				victim is player
				if projectile is set:
					broadcast "&8[&f☠&8] &7%victim's display name% &7was shot by %attacker's display name%"
				else:
					broadcast "&8[&f☠&8] &7%victim's display name% &7was killed by %attacker's display name%"
				add 1 to {p_mdeath::%victim%}
			else if attacker is a player:
				victim is player
				add 1 to {p_pkill::%attacker%}
				add 1 to {p_pdeath::%victim%}
				if projectile is set:
					set {_msg} to new text component of "&8[&f☠&8] &7%victim's display name% &7was shot by %attacker's display name% using "
				else:
					set {_msg} to new text component of "&8[&f☠&8] &7%victim's display name% &7was killed by %attacker's display name% using "
				set {_weapon} to new text component of "&8[&f%name of tool of attacker%&8]"
				set {_info} to tool of attacker
				set hover event of {_weapon} to a new hover event showing {_info}
				loop all players:
					send components {_msg} and {_weapon} to loop-player

every 3 seconds in "{@world}":
	loop all players:
		if {p_defense::%loop-player%} is less than {p_maxdefense::%loop-player%}:
			{dead.%loop-player%} is not set
			add 1 to {p_defense::%loop-player%}

# on join:
# 	set {_bossbar} to 0
# 	create bossbar titled " " and id "bossbar.%player%" for player with progress 100 with colors yellow
# 	while player is online:
# 		if {_bossbar} is 0:
# 			set bossbar "bossbar.%player%" value to 100
# 			set bossbar "bossbar.%player%" color to yellow
# 			set bossbar "bossbar.%player%" title to "&7Welcome to &6&lRe&e&lSHAFT&7²"
# 		else if {_bossbar} is 1:
# 			set bossbar "bossbar.%player%" value to 66
# 			set bossbar "bossbar.%player%" color to yellow
# 			set bossbar "bossbar.%player%" title to "&7IP: &6reshaft.minehut.gg"
# 		else if {_bossbar} is 2:
# 			set bossbar "bossbar.%player%" value to 33
# 			set bossbar "bossbar.%player%" color to yellow
# 			set bossbar "bossbar.%player%" title to "&7Join Our &eDiscord &7with &e/discord &8| &7Use &e/link &7 for Rewards"
# 		else if {_bossbar} is 3:
# 			set {_format} to timeFormat({servertime})
# 			set bossbar "bossbar.%player%" value to 0
# 			set bossbar "bossbar.%player%" color to yellow
# 			set bossbar "bossbar.%player%" title to "&6Server Time: &e%{_format}% &7(&e%{servertime}%&et&7)"
		# else if {_bossbar} is 4:
		# 	set bossbar "bossbar.%player%" value to 20
		# 	set bossbar "bossbar.%player%" color to red
		# 	set bossbar "bossbar.%player%" title to "&eRebirth &7to collect &ebonuses &7and &egear"
		# else if {_bossbar} is 5:
		# 	set bossbar "bossbar.%player%" value to 0
		# 	set bossbar "bossbar.%player%" color to red
		# 	set bossbar "bossbar.%player%" title to "&7Help us &cdestroy &7this world"
	# 	wait 3 seconds
	# 	add 1 to {_bossbar}
	# 	if {_bossbar} is 4:
	# 		set {_bossbar} to 0
	# remove bossbar "bossbar.%player%"

# ==== SERVER TIME ====

# function timeFormat(t: integer) :: text: 
# 	set {_h} to floor({_t} / 60)
# 	set {_m} to {_t} - ({_h} * 60)
# 	if {_h} is less than 10:
# 		set {_h} to "0%{_h}%"
# 	if {_m} is 0:
# 		set {_m} to "00"
# 	else if {_m} is less than 10:
# 		set {_m} to "0%{_m}%"
# 	set {_time} to "%{_h}%:%{_m}%"
# 	return {_time}

# command /servertime [<integer>]:
# 	trigger:
# 		if player is op:
# 			if arg-1 is not set:
# 				send "{@admin} /servertime <integer>"
# 			else if arg-1 is greater than 1440:
# 				set {_time} to 1440
# 			else:
# 				set {_time} to arg-1
# 			set {servertime} to {_time}
# 			set {_format} to timeFormat({_time})
# 			send "{@admin} &7Server time set to &e%{_format}% &7(&e%{servertime}%&et&7)"
# 			# send "```Time: %{servertime}%```" to channel with id "886738161491914772" with "ReShaft"
# 		else:
# 			send "{@admin} {@permission}"

# every 1 minute in "{@world}":
# 	add 1 to {servertime}
# 	if {servertime} is greater than 1440:
# 		set {servertime} to 0
# 	if mod({servertime}, 60) is 0:
# 		set {_format} to timeFormat({servertime})
# 		broadcast "{@shaft} &7Server Time: &e%{_format}% &7(&e%{servertime}%t&7)"
	# send "```Time: %{servertime}%```" to channel with id "886738161491914772" with "ReShaft"

function roundto(n: number, to: number) :: number:
   return floor(({_n} * 10^{_to}) + 0.5) / 10^{_to}

function format(n: number) :: text:
	set {_data} to "f,18|e,15|d,12|c,9|b,6|a,3"
	loop split {_data} at "|":
		set {_s::*} to split loop-value at ","
		{_n} >= 10 ^ {_s::2} parsed as number
		set {_nn} to roundto({_n} / 10 ^ {_s::2} parsed as number, 1)
		return "%{_nn}%%{_s::1}%"
	return "%{_n}%"

function spaced(n: text) :: text:
	set {_s::*} to split {_n} at "."
	if {_s::2} is not set:
		return a({_n})
	else:
		return "%a({_s::1})%.%{_s::2}%"
 
function a(b: text) :: text:
	if length of {_b} > 3:
		return "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
	return {_b}

on join:
	wipe player's sidebar
	set name of sidebar of player to "&6&lRe&e&lSHAFT&7²"
	create id score "&7" in sidebar of player to 12 with id "line12-%player%"
	create id score " &e&lPLAYER" in sidebar of player to 11 with id "line11-%player%"
	create id score " &8┃ &7Level: &f%{p_level::%player%}%" in sidebar of player to 10 with id "line10-%player%"
	set {_expFormat} to format({p_exp::%player%})
	set {_nextexpFormat} to format({p_nextexp::%player%})
	create id score " &8╹ &7Exp: &f%{_expFormat}%&7/&f%{_nextexpFormat}%" in sidebar of player to 9 with id "line9-%player%"
	create id score "&8" in sidebar of player to 8 with id "line8-%player%"
	create id score " &8(&f%{_percentFormat}%%%&8)" in sidebar of player to 7 with id "line7-%player%" 
	set {_percent} to {p_exp::%player%} / {p_nextexp::%player%}
	set {_percentFormat} to roundto({_percent} * 100, 1)
	if {_percent} is between 0 and 0.05:
		create id score " &8[&e&7::::::::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.05 and 0.1:
		create id score " &8[&e:&7:::::::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.1 and 0.15:
		create id score " &8[&e::&7::::::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.15 and 0.2:
		create id score " &8[&e:::&7:::::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.2 and 0.25:
		create id score " &8[&e::::&7::::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.25 and 0.3:
		create id score " &8[&e:::::&7:::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.3 and 0.35:
		create id score " &8[&e::::::&7::::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.35 and 0.4:
		create id score " &8[&e:::::::&7:::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.4 and 0.45:
		create id score " &8[&e::::::::&7::::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.45 and 0.5:
		create id score " &8[&e:::::::::&7:::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.5 and 0.55:
		create id score " &8[&e::::::::::&7::::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.55 and 0.6:
		create id score " &8[&e:::::::::::&7:::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.6 and 0.65:
		create id score " &8[&e::::::::::::&7::::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.65 and 0.7:
		create id score " &8[&e:::::::::::::&7:::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.7 and 0.75:
		create id score " &8[&e::::::::::::::&7::::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.75 and 0.8:
		create id score " &8[&e:::::::::::::::&7:::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.8 and 0.85:
		create id score " &8[&e::::::::::::::::&7::::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.85 and 0.9:
		create id score " &8[&e:::::::::::::::::&7:::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.9 and 0.95:
		create id score " &8[&e::::::::::::::::::&7::&8]" in sidebar of player to 6 with id "line6-%player%"
	else if {_percent} is between 0.95 and 1:
		create id score " &8[&e:::::::::::::::::::&7:&8]" in sidebar of player to 6 with id "line6-%player%"
	else:
		create id score " &8[&e::::::::::::::::::::&7&8]" in sidebar of player to 6 with id "line6-%player%"
	create id score "  " in sidebar of player to 5 with id "line5-%player%"
	create id score " &e&lBALANCE" in sidebar of player to 4 with id "line4-%player%"
	set {_coin} to format({p_coins::%player%})
	create id score " &8┃ &7Coins: &f%{_coin}%" in sidebar of player to 3 with id "line3-%player%"
	set {_wrath} to format({p_wrath::%player%})
	create id score " &8┃ &7Wrath: &f%{_wrath}%" in sidebar of player to 2 with id "line2-%player%"
	create id score " &8╹ &7Virtue: " in sidebar of player to 1 with id "line1-%player%"
	create id score "&9" in sidebar of player to 0 with id "line0-%player%"
	while player is online:
		update score with id "line12-%player%" to "&7" and 12
		update score with id "line11-%player%" to " &e&lPLAYER" and 11
		update score with id "line10-%player%" to " &8┃ &7Level: &f%{p_level::%player%}%" and 10
		set {_expFormat} to format({p_exp::%player%})
		set {_nextexpFormat} to format({p_nextexp::%player%})
		update score with id "line9-%player%" to " &8╹ &7Exp: &f%{_expFormat}%&7/&f%{_nextexpFormat}%" and 9
		update score with id "line8-%player%" to "&8" and 8
		update score with id "line7-%player%" to " &8(&f%{_percentFormat}%%%&8)" and 7
		set {_percent} to {p_exp::%player%} / {p_nextexp::%player%}
		set {_percentFormat} to roundto({_percent} * 100, 1)
		if {_percent} is between 0 and 0.05:
			update score with id "line6-%player%" to " &8[&e&7::::::::::::::::::::&8]" and 6 
		else if {_percent} is between 0.05 and 0.1:
			update score with id "line6-%player%" to " &8[&e:&7:::::::::::::::::::&8]" and 6 
		else if {_percent} is between 0.1 and 0.15:
			update score with id "line6-%player%" to " &8[&e::&7::::::::::::::::::&8]" and 6 
		else if {_percent} is between 0.15 and 0.2:
			update score with id "line6-%player%" to " &8[&e:::&7:::::::::::::::::&8]" and 6 
		else if {_percent} is between 0.2 and 0.25:
			update score with id "line6-%player%" to " &8[&e::::&7::::::::::::::::&8]" and 6 
		else if {_percent} is between 0.25 and 0.3:
			update score with id "line6-%player%" to " &8[&e:::::&7:::::::::::::::&8]" and 6 
		else if {_percent} is between 0.3 and 0.35:
			update score with id "line6-%player%" to " &8[&e::::::&7::::::::::::::&8]" and 6 
		else if {_percent} is between 0.35 and 0.4:
			update score with id "line6-%player%" to " &8[&e:::::::&7:::::::::::::&8]" and 6 
		else if {_percent} is between 0.4 and 0.45:
			update score with id "line6-%player%" to " &8[&e::::::::&7::::::::::::&8]" and 6 
		else if {_percent} is between 0.45 and 0.5:
			update score with id "line6-%player%" to " &8[&e:::::::::&7:::::::::::&8]" and 6 
		else if {_percent} is between 0.5 and 0.55:
			update score with id "line6-%player%" to " &8[&e::::::::::&7::::::::::&8]" and 6 
		else if {_percent} is between 0.55 and 0.6:
			update score with id "line6-%player%" to " &8[&e:::::::::::&7:::::::::&8]" and 6 
		else if {_percent} is between 0.6 and 0.65:
			update score with id "line6-%player%" to " &8[&e::::::::::::&7::::::::&8]" and 6 
		else if {_percent} is between 0.65 and 0.7:
			update score with id "line6-%player%" to " &8[&e:::::::::::::&7:::::::&8]" and 6 
		else if {_percent} is between 0.7 and 0.75:
			update score with id "line6-%player%" to " &8[&e::::::::::::::&7::::::&8]" and 6 
		else if {_percent} is between 0.75 and 0.8:
			update score with id "line6-%player%" to " &8[&e:::::::::::::::&7:::::&8]" and 6 
		else if {_percent} is between 0.8 and 0.85:
			update score with id "line6-%player%" to " &8[&e::::::::::::::::&7::::&8]" and 6 
		else if {_percent} is between 0.85 and 0.9:
			update score with id "line6-%player%" to " &8[&e:::::::::::::::::&7:::&8]" and 6 
		else if {_percent} is between 0.9 and 0.95:
			update score with id "line6-%player%" to " &8[&e::::::::::::::::::&7::&8]" and 6 
		else if {_percent} is between 0.95 and 1:
			update score with id "line6-%player%" to " &8[&e:::::::::::::::::::&7:&8]" and 6 
		else:
			update score with id "line6-%player%" to " &8[&e::::::::::::::::::::&7&8]" and 6 
		update score with id "line5-%player%" to "  " and 5 
		update score with id "line4-%player%" to " &e&lBALANCE" and 4 
		set {_coin} to format({p_coins::%player%})
		update score with id "line3-%player%" to " &8┃ &7Coins: &f%{_coin}%" and 3 
		set {_wrath} to format({p_wrath::%player%})
		update score with id "line2-%player%" to " &8┃ &7Wrath: &f%{_wrath}%" and 2 
		update score with id "line1-%player%" to " &8╹ &7Virtue: " and 1 
		update score with id "line0-%player%" to "&9" and 0 
		wait 3 ticks
 
on quit:
	wipe player's sidebar
	loop 13 times:
		remove score with id "line%loop-number-1%-%player%"

# ==== World Border ====

# command /serverstigma [<text>] [<integer>]:
# 	trigger:
# 		if player is op:
# 			if arg-1 is not "add" or "remove" or "set" or "reset":
# 				send "{@admin} /serverstigma <add remove set reset>"
# 			else if arg-2 is not set:
# 				arg-1 is not "reset"
# 				send "{@admin} /serverstigma <%arg-1%> <integer>"
# 				send "{@admin} &7Added &e%arg-2% &7from server stigma"
# 			if arg-1 is "add":
# 				add arg-2 to {serverstigma}
# 			else if arg-1 is "remove":
# 				remove arg-2 from {serverstigma}
# 				send "{@admin} &7Removed &e%arg-2% &7from server stigma"
# 			else if arg-1 is "set":
# 				set {serverstigma} to arg-2
# 				send "{@admin} &7Server stigma set to &e%arg-2%"
# 			else if arg-1 is "reset":
# 				set {serverstigma} to 0
# 				send "{@admin} &7Server stigma set to &e0"
# 		else:
# 			send "{@admin} {@permission}"

# function setWorldBorder(n: integer):
# 	make console execute "/minecraft:worldborder set %{_n}%"
# 	broadcast "{@shaft} &7Worldborder moved to &e%{_n}% &7blocks"

# every 5 seconds in "{@world}":
# 	set {_border} to floor({serverstigma} ^ (1/2))
# 	add 102 to {_border}
# 	{worldborder} is not {_border}
# 	set {worldborder} to {_border}
# 	setWorldBorder({worldborder})
		
# command /worldborder [<integer>]:
# 	trigger:
# 		if player is op:
# 			setWorldBorder(arg-1)
# 			set {worldborder} to arg-1
# 		else:
# 			send "{@admin} {@permission}"

# every 2 seconds in "world":
# 	loop all players:
# 		"%regions at loop-player%" does not contain "spawn"
# 		loop all blocks in radius 10 around loop-player:
# 			if loop-block is water or lava:
# 				delete loop-block		
# on flow:
# 	if "%regions at event-block%" does not contain "spawn":
# 		cancel event

# ======== MOB SPAWN ======== MOB SPAWN ========
# ======== MOB SPAWN ======== MOB SPAWN ========
# ======== MOB SPAWN ======== MOB SPAWN ========

function boneWarrior(e: entity):
	set {m_maxhealth::%{_e}%} to 50
	set {m_damage::%{_e}%} to 1
	set {m_health::%{_e}%} to 50
	set helmet of {_e} to bone
	set chestplate of {_e} to iron chestplate
	set leggings of {_e} to leather leggings
	dye leggings of {_e} white
	set boots of {_e} to iron boots
	set held item of {_e} to bone
	#enchant helmet of {_e} with thorns
	enchant chestplate of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant leggings of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant boots of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant held item of {_e} with sharpness 7

function boneArcher(e: entity):
	set {m_maxhealth::%{_e}%} to 20
	set {m_damage::%{_e}%} to 2
	set {m_health::%{_e}%} to 20
	set helmet of {_e} to feather
	set chestplate of {_e} to iron chestplate
	set leggings of {_e} to leather leggings
	dye leggings of {_e} white
	set boots of {_e} to iron boots
	set held item of {_e} to bow
	enchant helmet of {_e} with thorns
	enchant chestplate of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant leggings of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant boots of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant held item of {_e} with power 7

function orcCaptain(e: entity):
	set {m_maxhealth::%{_e}%} to 50
	set {m_damage::%{_e}%} to 1
	set {m_health::%{_e}%} to 50
	set helmet of {_e} to fern
	set chestplate of {_e} to leather chestplate
	dye chestplate of {_e} green
	set leggings of {_e} to netherite leggings
	set boots of {_e} to leather boots
	dye boots of {_e} lime
	set held item of {_e} to iron sword
	enchant helmet of {_e} with thorns
	enchant chestplate of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant leggings of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant boots of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant held item of {_e} with power 7

function orcWarrior(e: entity):
	set {m_maxhealth::%{_e}%} to 50
	set {m_damage::%{_e}%} to 1
	set {m_health::%{_e}%} to 50
	set helmet of {_e} to dark prismarine slab
	set chestplate of {_e} to leather chestplate
	dye chestplate of {_e} green
	set leggings of {_e} to netherite leggings
	set boots of {_e} to leather boots
	dye boots of {_e} lime
	set held item of {_e} to stone sword
	enchant helmet of {_e} with thorns
	enchant chestplate of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant leggings of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant boots of {_e} with protection 5, fire protection 3, blast protection 3, and unbreaking 5#, and thorns
	enchant held item of {_e} with power 7

on combust:
	if event-entity is zombie or skeleton:
		cancel event

on spawn of zombie:
	set {_n} to random integer between 1 and 2
	if {mobcap} is true:
		cancel event
	else if block below event-location is not grass block:
		cancel event
	else if {_n} is 1:
		orcCaptain(event-entity)
		set name of event-entity to "&8[&e:L100&8] &fOrc:Captain &7(&c%{m_health::%event-entity%}%&c/%{m_maxhealth::%event-entity%}% ❤&7)"
	else if {_n} is 2:
		orcWarrior(event-entity)
		set name of event-entity to "&8[&e:L100&8] &fOrc:Warrior &7(&c%{m_health::%event-entity%}%&c/%{m_maxhealth::%event-entity%}% ❤&7)"
on spawn of skeleton:
	set {_n} to random integer between 1 and 2
	if {mobcap} is true:
		cancel event
	else if block below event-location is not grass block:
		cancel event
	else if {_n} is 1:
		boneWarrior(event-entity)
		set name of event-entity to "&8[&e:L100&8] &fBone:Warrior &7(&c%{m_health::%event-entity%}%&c/%{m_maxhealth::%event-entity%}% ❤&7)"
	else if {_n} is 2:
		boneArcher(event-entity)
		set name of event-entity to "&8[&e:L100&8] &fBone:Archer &7(&c%{m_health::%event-entity%}%&c/%{m_maxhealth::%event-entity%}% ❤&7)"
on spawn of creeper:
#	if {mobcap} is false:
	cancel event
on spawn of enderman:
#	if {mobcap} is false:
	cancel event
on spawn of witch:
#	if {mobcap} is false:
	cancel event
on spawn of spider:
#	if {mobcap} is false:
	cancel event
on spawn of chicken:
	cancel event
on spawn of pig:
#	if {mobcap} is false:
	cancel event
on spawn of cow:
#	if {mobcap} is false:
	cancel event
on spawn of sheep:
#	if {mobcap} is false:
	cancel event

every 10 seconds in "{@world}":
	loop all entities:
		loop-entity is not a player
		if "%region at loop-entity%" does not contain "spawn":
			delete loop-entity
			delete {m_maxhealth::%loop-entity%}
			delete {m_health::%loop-entity%}
			delete {m_damage::%loop-entity%}

	set {_p} to number of players
	set {_d} to number of entities in "{@world}" - {_p}
	if {_d} is greater than 50:
		set {mobcap} to true
	else:
		set {mobcap} to false

# ======== BLESSING  ======== BLESSING  ========
# ======== BLESSING  ======== BLESSING  ========
# ======== BLESSING  ======== BLESSING ========

command /blessing [<integer>]:
	trigger:
		if player is op:
			if arg-1 is set:
				set {blessing} to arg-1
				send "{@admin} &7Set Global Blessing to %arg-1%%%"
				send "```Blessing: %arg-1%%%```" to channel with id "886738161491914772" with "ReShaft"
			else:
				send "{@admin} /blessing <integer>"
		else:
			send "{@admin} {@permission}"

# ======== PLAYER STATS ======== PLAYER STATS ========
# ======== PLAYER STATS ======== PLAYER STATS ========
# ======== PLAYER STATS ======== PLAYER STATS ========

# on join:
# 	if {p_level::%player%} is not set:
# 		set {p_level::%player%} to 1
# 	if {p_exp::%player%} is not set:
# 		set {p_exp::%player%} to 0
# 	if {p_nextexp::%player%} is not set:
# 		set {p_nextexp::%player%} to 10
# 	if {p_totalexp::%player%} is not set:
# 		set {p_totalexp::%player%} to 0
# 	if {p_coins::%player%} is not set:
# 		set {p_coins::%player%} to 0
# 	if {p_wrath::%player%} is not set:
# 		set {p_wrath::%player%} to 0
# 	if {p_virtue::%player%} is not set:
# 		set {p_virtue::%player%} to 100
# 	if {p_totalcoins::%player%} is not set:
# 		set {p_totalcoins::%player%} to 0
# 	if {p_totalwrath::%player%} is not set:
# 		set {p_totalwrath::%player%} to 0
# 	if {p_mkill::%player%} is not set:
# 		set {p_mkill::%player%} to 0
# 	if {p_mdeath::%player%} is not set:
# 		set {p_mdeath::%player%} to 0
# 	if {p_pkill::%player%} is not set:
# 		set {p_pkill::%player%} to 0
# 	if {p_pdeath::%player%} is not set:
# 		set {p_pdeath::%player%} to 0
# 	if {p_rebirth::%player%} is not set:
# 		set {p_rebirth::%player%} to 0
# 	if {p_damage::%player%} is not set:
# 		set {p_damage::%player%} to 1
# 	if {p_health::%player%} is not set:
# 		set {p_health::%player%} to 20
# 	if {p_maxhealth::%player%} is not set:
# 		set {p_maxhealth::%player%} to 20
# 	if {p_defense::%player%} is not set:
# 		set {p_defense::%player%} to 5
# 	if {p_maxdefense::%player%} is not set:
# 		set {p_maxdefense::%player%} to 5

command /statcheck [<player>]:
	trigger:
		if player is not op:
			stop
		if arg-1 is not set:
			send "{@admin} &7/statcheck <player>"
			stop
		if {p_level::%arg-1%} is not set:
			set {p_level::%arg-1%} to 1
		if {p_exp::%arg-1%} is not set:
			set {p_exp::%arg-1%} to 0
		if {p_nextexp::%arg-1%} is not set:
			set {p_nextexp::%arg-1%} to 10
		if {p_totalexp::%arg-1%} is not set:
			set {p_totalexp::%arg-1%} to 0
		if {p_coins::%arg-1%} is not set:
			set {p_coins::%arg-1%} to 0
		if {p_wrath::%arg-1%} is not set:
			set {p_wrath::%arg-1%} to 0
		if {p_virtue::%arg-1%} is not set:
			set {p_virtue::%arg-1%} to 100
		if {p_totalcoins::%arg-1%} is not set:
			set {p_totalcoins::%arg-1%} to 0
		if {p_totalwrath::%arg-1%} is not set:
			set {p_totalwrath::%arg-1%} to 0
		if {p_mkill::%arg-1%} is not set:
			set {p_mkill::%arg-1%} to 0
		if {p_mdeath::%arg-1%} is not set:
			set {p_mdeath::%arg-1%} to 0
		if {p_pkill::%arg-1%} is not set:
			set {p_pkill::%arg-1%} to 0
		if {p_pdeath::%arg-1%} is not set:
			set {p_pdeath::%arg-1%} to 0
		if {p_rebirth::%arg-1%} is not set:
			set {p_rebirth::%arg-1%} to 0
		if {p_damage::%arg-1%} is not set:
			set {p_damage::%arg-1%} to 1
		if {p_health::%arg-1%} is not set:
			set {p_health::%arg-1%} to 20
		if {p_maxhealth::%arg-1%} is not set:
			set {p_maxhealth::%arg-1%} to 20
		if {p_defense::%arg-1%} is not set:
			set {p_defense::%arg-1%} to 5
		if {p_maxdefense::%arg-1%} is not set:
			set {p_maxdefense::%arg-1%} to 5
		send "{@admin} &7Done Checking"

# ======== /TOP ======== /TOP ========
# ======== /TOP ======== /TOP ========
# ======== /TOP ======== /TOP ========

command /top [<text>]:
	trigger:
		if arg-1 is not "level" or "coins" or "totalcoins" or "wrath" or "totalwrath" or "totalstigma" or "pkill" or "mkill" or "rebirth" or "maxhealth" or "damage":
			send "{@shaft} /top <level coins totalcoins wrath totalwrath totalstigma pkill mkill rebirth>"
		else:
			loop {p_%arg-1%::*}:
				add 1 to {_size}
				if {_low.to.high.list::%loop-value%} is not set:
					set {_low.to.high.list::%loop-value%} to loop-index
				else:
					set {_n} to 0
					loop {_size} times:
						set {_n} to {_n}+1
						{_low.to.high.list::%loop-value-1%.%{_n}%} is not set
						set {_low.to.high.list::%loop-value-1%.%{_n}%} to loop-index
						stop loop
		wait 1 tick
		set {_n} to size of {_low.to.high.list::*}
		loop {_low.to.high.list::*}:
			set {_high.to.low.list::%{_n}%} to loop-value
			set {_n} to {_n}-1
		wait 1 tick
		set {_i} to 0
		send "&7&m-----------&r &8[ &e&lTOP &8] &7&m-------------"
		loop {_high.to.low.list::*}:
			if arg-1 is "level":
				set {_label} to "&e:L%{p_%arg-1%::%loop-value%}%"
			else if arg-1 is "coins" or "totalcoins":
				set {_coins} to format({p_%arg-1%::%loop-value%})
				set {_label} to "&e%{_coins}% &7coins"
			else if arg-1 is "wrath" or "totalwrath":
				set {_wrath} to format({p_%arg-1%::%loop-value%})
				set {_label} to "&e%{_wrath}% &7wrath"
			else if arg-1 is "totalstigma":
				set {_stigma} to format({p_%arg-1%::%loop-value%})
				set {_label} to "&e%{_stigma}% &7stigma"
			else if arg-1 is "mkill" or "pkill":
				set {_label} to "&e%{p_%arg-1%::%loop-value%}% &7kills"
			else if arg-1 is "rebirth":
				set {_label} to "&e%{p_%arg-1%::%loop-value%}% &7times"
			else if arg-1 is "maxhealth":
				set {_label} to "&c%{%arg-1%::%loop-value%}% &c❤"
			else if arg-1 is "damage":
				set {_label} to "&c%{%arg-1%::%loop-value%}% &cdmg"
			add 1 to {_topnumber}
			set {_player} to "%loop-value%" parsed as offline player
			send "&7%{_topnumber}%&7. %{_player}%: %{_label}%"
			add 1 to {_i}
			if {_topnumber} > 10:
				stop
		send "&7&m--------------------------------"

# ======== CHAT FORMAT ======== CHAT FORMAT ========
# ======== CHAT FORMAT ======== CHAT FORMAT ========
# ======== CHAT FORMAT ======== CHAT FORMAT ========

on chat:
	set {_player} to display name of player
	if group of player is "admin":
		set {_prefix} to "&6&lADMIN&8]&r &8[&e:L"
	else if group of player is "mod":
		set {_prefix} to "&e&lMOD&8]&r &8[&e:L"
	else:
		set {_prefix} to "&7:L"

	if group of player is "admin" or "mod":
		set {_level} to a new text component of "&e%{p_level::%player%}%"
	else:
		set {_level} to a new text component of "&7%{p_level::%player%}%"
	set {_wrath} to format({p_totalwrath::%player%})
	set {_total} to format({p_totalstigma::%player%})
	set {_stats} to bedrock named "&8[&e:L%{p_level::%player%}%&8] &f%{_player}%" with lore " &8┃ &7Wrath: &e%{_wrath}%" and " &8╹ &7Stigma: &e%{_total}%"
	set hover event of {_level} to a new hover event showing {_stats}

	set {_slotList::hand} to index of player's hotbar slot
	set {_keywordList::hand::*} to "[hand]", "[item]" and "[i]"
	set {_slotList::offhand} to 40
	set {_keywordList::offhand::*} to "[offhand]"
	set {_slotList::helmet} to 39
	set {_keywordList::helmet::*} to "[helmet]", "[helm]", "[cap]" and "[head]"
	set {_slotList::chestplate} to 38
	set {_keywordList::chestplate::*} to "[chestplate]", "[tunic]" and "[chest]"
	set {_slotList::leggings} to 37
	set {_keywordList::leggings::*} to "[leggings]", "[pants]" and "[legs]"
	set {_slotList::boots} to 36
	set {_keywordList::boots::*} to "[boots]" and "[feet]"
	loop indices of {_keywordList::*}:
		loop {_keywordList::%loop-value%::*}:
			message contains loop-value-2
			add {_slotList::%loop-value-1%} to {_items::*}
			add loop-value-2 to {_keywords::*}
			exit 1 loop
	if size of {_keywords::*} > 0:
		cancel event
		set {_message} to message
		loop {_keywords::*}:
			loop indices of {_keywordList::*}:
				{_keywordList::%loop-value-2%::*} contains loop-value-1
				loop {_keywordList::%loop-value-2%::*}:
					loop-value-3 is not loop-value-1
					replace all loop-value-3 with "" in {_message}
			set {_messages::*} to {_message} split at "%loop-value%"
			set {_temp} to {_messages::1}
			delete {_messages::1}
			set {_message} to "&7%{_temp}%%loop-value%&7%join {_messages::*} with """"%"
			replace all loop-value with "{CIplaceholder}:{%loop-index%}:{CIplaceholder}" in {_message}
		set {_messages::*} to {_message} split at "{CIplaceholder}"
		loop {_messages::*}:
			set {_messages::%loop-index%} to a new text component of "%loop-value%"
			"%loop-value%" is ":{1}:", ":{2}:", ":{3}:", ":{4}:", ":{5}:" or ":{6}:"
			set {_itemIndex} to subtext of "%loop-value%" from characters 3 to 3
			set {_itemIndexes::%{_itemIndex}%} to loop-index
		loop {_items::*}:
			delete {_name}
			set {_item} to loop-value
			if {_item} is a number:
				set {_item} to slot {_item} of player's inventory
			if {_item} is not set:
				set {_messages::%{_itemIndexes::%loop-index%}%} to a new text component of "&7%{_keywords::%loop-index%}%"
			else if {_item} is not air:
				set {_name} to name of {_item}
				if {_name} is not set:
					set {_name} to a new translate component from {_item}
				set {_itemName} to a new text component of "&8[&r%{_name}%&8]&r"
				set hover event of {_itemName} to a new hover event showing {_item}
				set {_messages::%{_itemIndexes::%loop-index%}%} to {_itemName}
			else:
				set {_messages::%{_itemIndexes::%loop-index%}%} to a new text component of "&7%{_keywords::%loop-index%}%"
		set {_messageFormat::*} to message format split at "[message]"
		replace "<[player]>" with "%{_player}%&7:&r" in {_messageFormat::1}
		replace "world" with "" in {_messageFormat::*}
		replace "[" with "" in {_messageFormat::*}
		replace "]" with "" in {_messageFormat::*}
		replace "build" with "" in {_messageFormat::*}
		if message format contains message:
			set {_messageFormat::*} to message format split at message
		set {_temp} to a new text component of "%{_messageFormat::1}%"
		set {_p} to a new text component of "&8[%{_prefix}%"
		set {_s} to a new text component of "&8] "
		set {_} to a new text component of "&7: "
		delete {_messageFormat::1}
		loop all players:
			send components {_p}, {_level}, {_s}, {_temp}, {_messages::*} and {_messageFormat::*} to loop-player
		send components {_p}, {_level}, {_s}, {_temp}, {_messages::*} and {_messageFormat::*} to console
		if group of player is "admin":
			send "[**ADMIN**] [:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"
		else if group of player is "mod":
			send "[**MOD**] [:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"
		else:
			send "[:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"
	else:
		cancel event
		set {_message} to a new text component of "&7%message%"
		set {_player} to a new text component of {_player}
		set {_p} to a new text component of "&8[%{_prefix}%"
		set {_s} to a new text component of "&8] &f"
		set {_} to a new text component of "&7: "
		loop all players:
			send components {_p}, {_level}, {_s}, {_player}, {_}, and {_message} to loop-player
		send components {_p}, {_level}, {_s}, {_player}, {_}, and {_message} to console
		if group of player is "admin":
			send "[**ADMIN**] [:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"
		else if group of player is "mod":
			send "[**MOD**] [:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"
		else:
			send "[:**L%{p_level::%player%}%**] %uncolored display name of player%: %message%" to channel with id "872657350316687362" with "ReShaft"

# ======== PLAYER INVENTORY ======== PLAYER INVENTORY ========
# ======== PLAYER INVENTORY ======== PLAYER INVENTORY ========
# ======== PLAYER INVENTORY ======== PLAYER INVENTORY ========

command /new [<text>]:
	trigger:
		if player is op:
			if arg-1 is "lock" or "locked":
				newlock(player)
			else if arg-1 is "unlock" or "unlocked":
				new(player)
			else if arg-1 is "center":
				newcenter(player)
		else:
			send "{@admin} {@permission}"

function new(p: player):
	set helmet of {_p} to {1_helmet}
	set chestplate of {_p} to {1_chestplate}
	set leggings of {_p} to {1_leggings}
	set boots of {_p} to {1_boots}
	set slot 0 of {_p} to {1_sword}
	set slot 1 of {_p} to {1_bow}
	set slot 40 of {_p} to {1_shield}
	set slot 9 of {_p} to skull of {_p} named "&e&lMENU" with lore " &8╹ &7Click to Open"

function newlock(p: player):
	set helmet of {_p} to {1_helmet}
	set chestplate of {_p} to {1_chestplate}
	set leggings of {_p} to {1_leggings}
	set boots of {_p} to {1_boots}
	set slot 0 of {_p} to {1_sword}
	set slot 1 of {_p} to {1_bow}
	set slot 40 of {_p} to {1_shield}
	set slot 9 of {_p} to skull of {_p} named "&e&lMENU" with lore " &8╹ &7Click to Open"

function newcenter(p: player):
	set slot 12 of {_p} to {pegasuslock}
	set slot 13 of {_p} to {athenalock}
	set slot 14 of {_p} to {poseidonlock}
	set slot 21 of {_p} to {apollolock}
	set slot 22 of {_p} to {hadeslock}
	set slot 23 of {_p} to {kronoslock}
	set slot 30 of {_p} to {talarialock}
	set slot 31 of {_p} to {zeuslock}
	set slot 32 of {_p} to {hermeslock}

# ======== HOTBAR MENU ======== HOTBAR MENU ========
# ======== HOTBAR MENU ======== HOTBAR MENU ========
# ======== HOTBAR MENU ======== HOTBAR MENU ========

# function hat(p: player, i: item, s: integer):
# 	set {_cur} to helmet of {_p}
# 	set helmet of {_p} to {_i}
# 	set slot {_s} of {_p} to {_cur}

# function hatreset(p: player):
# 	set {_12} to slot 12 of {_p}
# 	if {_12} is light gray stained glass:
# 		set {_item} to {_12}
# 		set {_slot} to 12
# 	set {_13} to slot 13 of {_p}
# 	if {_13} is light gray stained glass:
# 		set {_item} to {_13}
# 		set {_slot} to 13
# 	set {_14} to slot 14 of {_p}
# 	if {_14} is light gray stained glass:
# 		set {_item} to {_14}
# 		set {_slot} to 14
# 	set {_21} to slot 21 of {_p}
# 	if {_21} is light gray stained glass:
# 		set {_item} to {_21}
# 		set {_slot} to 21
# 	set {_23} to slot 23 of {_p}
# 	if {_23} is light gray stained glass:
# 		set {_item} to {_23}
# 		set {_slot} to 23
# 	set {_14} to slot 22 of {_p}
# 	if {_14} is light gray stained glass:
# 		set {_item} to {_14}
# 		set {_slot} to 22
# 	set {_30} to slot 30 of {_p}
# 	if {_30} is light gray stained glass:
# 		set {_item} to {_30}
# 		set {_slot} to 30
# 	set {_cur} to helmet of {_p}
# 	if {_cur} is not light gray stained glass:
# 		hat({_p}, {_item}, {_slot})
# 	remove absorption from {_p}
# 	remove resistance from {_p}
# 	set flight mode of {_p} to false

# function unlock(p: player, c: integer, s: integer):
# 	if {p_wrath::%{_p}%} is greater than {_c}:
# 		remove {_c} from {p_wrath::%{_p}%}
# 		if {_s} is 12:
# 			set slot 12 of {_p} to {pegasus}
# 			send "{@shaft} &7Unlocked &bPegasus" to {_p}
# 		if {_s} is 13:
# 			set slot 13 of {_p} to {athena}
# 			send "{@shaft} &7Unlocked &bAthena" to {_p}
# 		if {_s} is 14:
# 			set slot 14 of {_p} to {poseidon}
# 			send "{@shaft} &7Unlocked &bPoseidon" to {_p}
# 		if {_s} is 21:
# 			set slot 21 of {_p} to {apollo}
# 			send "{@shaft} &7Unlocked &bApollo" to {_p}
# 		if {_s} is 22:
# 			set slot 22 of {_p} to {hades}
# 			send "{@shaft} &7Unlocked &bHades" to {_p}
# 		if {_s} is 23:
# 			set slot 23 of {_p} to {kronos}
# 			send "{@shaft} &7Unlocked &bKronos" to {_p}
# 		if {_s} is 30:
# 			set slot 30 of {_p} to {talaria}
# 			send "{@shaft} &7Unlocked &bTalaria" to {_p}
# 		if {_s} is 31:
# 			set slot 31 of {_p} to {zeus}
# 			send "{@shaft} &7Unlocked &bZeus" to {_p}
# 		if {_s} is 32:
# 			set slot 32 of {_p} to {hermes}
# 			send "{@shaft} &7Unlocked &bHermes" to {_p}
# 	else:
# 		send "{@shaft} {@wrath}" to {_p}

function arrowShop(p: player):
	open virtual chest inventory with size 1 named "&8Arrow Shop" to {_p}
	format gui slot 0 of {_p} with arrow

function toolbox(p: player):
	open virtual chest inventory with size 3 named "&8Tool Box" to {_p}

command /invlock:
	trigger:
		if player is op:
			if {unlock.%player%} is set:
				delete {unlock.%player%}
				send "{@admin} &7Inventory &c&lLOCKED"
			else:
				set {unlock.%player%} to true
				send "{@admin} &7Inventory &a&lUNLOCKED"
		else:
			send "{@admin} {permission}"

on inventory click:	
	if {unlock.%player%} is set:
		stop
	if clicked slot is 9:
		cancel event
		stop
	if name of event-inventory is "&8Wardrobe":
		if clicked item is helmet of player or chestplate of player or leggings of player or boots of player:
			armorUpgrade(player)
			stop
	if name of event-inventory is "&8Upgrades":
		if clicked item is helmet of player or chestplate of player or leggings of player or boots of player:
			wardrobe(player)
			stop
	if name of event-inventory is not "Crafting":
		cancel event
		stop
	if clicked slot is 0 or 1 or 2 or 3 or 4 or 5:
		if clicked slot is 0:
			set {_slot} to 0
		else if clicked slot is 1:
			set {_slot} to 1
		else if clicked slot is 2:
			set {_slot} to 2
		else if clicked slot is 3:
			set {_slot} to 3
		else if clicked slot is 4:
			set {_slot} to 4
		else if clicked slot is 5:
			set {_slot} to 5
		if clicked type is left mouse button:
			enchants(player, clicked item, {_slot})
		if clicked type is left mouse button with shift:
			wrathUpgrade(player, clicked item, {_slot})
		else if clicked type is right mouse button:
			if clicked slot is 0 or 1 or 2:
				gamemode of player is survival
				toolbox(player)
				stop
			else:
				cancel event
	# if clicked slot is 0:
	# 	gamemode of player is survival
	# 	set {_i} to slot 0 of player
	# 	set slot 40 of player to {_i}
	# if clicked slot is 1:
	# 	gamemode of player is survival
	# 	set {_i} to slot 1 of player
	# 	set slot 40 of player to {_i}
	# if clicked slot is 2:
	# 	gamemode of player is survival
	# 	set {_i} to slot 2 of player
	# 	set slot 40 of player to {_i}
	if clicked slot is 36 or 37 or 38 or 39:
		gamemode of player is survival
		if clicked type is left mouse button:
			armorUpgrade(player)
		else if clicked type is right mouse button:
			wardrobe(player)
	# shield
	# if clicked slot is 40:
	# 	gamemode of player is survival
	# 	delete slot 40 of player
	# if clicked slot is 12:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 15000, 12)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 	hat(player, clicked item, 12)
	# else if clicked slot is 13:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 15000, 13)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 	hat(player, clicked item, 13)
	# else if clicked slot is 14:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 15000, 14)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 	hat(player, clicked item, 14)
	# else if clicked slot is 21:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 10000, 21)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 		apply absorption 5 to player for 9999 days
	# 	else:
	# 		remove absorption from player
	# 	hat(player, clicked item, 21)
	# else if clicked slot is 22:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 10000, 22)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 	hat(player, clicked item, 22)
	# else if clicked slot is 23:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 10000, 23)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 		apply resistance 2 to player for 9999 days
	# 	else:
	# 		remove resistance from player
	# 	hat(player, clicked item, 23)
	# if clicked slot is 30:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 5000, 30)
	# 		stop
	# 	if clicked item is not light gray stained glass:
	# 		hatreset(player)
	# 		set player's flight mode to true
	# 	else:
	# 		set player's flight mode to false
	# 	hat(player, clicked item, 30)
	# else if clicked slot is 31:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 3000, 31)
	# 		stop
	# 	set {_cur} to chestplate of player
	# 	set {_new} to clicked item
	# 	set chestplate of player to {_new}
	# 	set slot 31 of player to {_cur}
	# else if clicked slot is 32:
	# 	cancel event
	# 	if name of clicked item contains "&c&lLOCKED":
	# 		unlock(player, 5000, 32)
	# 		stop
	# 	set {_cur} to boots of player
	# 	set {_new} to clicked item
	# 	set boots of player to {_new}
	# 	set slot 32 of player to {_cur}
	if group of player is not "admin":
		cancel event

# ======== HOTBAR FUNCTIONS ======== HOTBAR FUNCTIONS ========
# ======== HOTBAR FUNCTIONS ======== HOTBAR FUNCTIONS ========
# ======== HOTBAR FUNCTIONS ======== HOTBAR FUNCTIONS ========

function settings(p: player):
	open virtual chest inventory with size 1 named "&8Settings" to {_p}
	if {pvp::%{_p}%} is false:
		format gui slot 0 of {_p} with red dye named "&7&lPvP &c&lDISABLED" with lore " &8╹ &7Click to Enable (/pvp)" to run:
			delete {pvp::%{_p}%}
			settings({_p})
	else:
		format gui slot 0 of {_p} with lime dye named "&7&lPvP &a&lENABLED" with lore " &8╹ &7Click to Disable (/pvp)" to run:
			set {pvp::%{_p}%} to false
			settings({_p})
	format gui slot 1 of {_p} with nether star named "&7&lSPAWN" with lore " &8╹ Click to Teleport" to run:
		teleport {_p} to {spawn}
	set {_waited} to difference between {daily.%{_p}%.lastused} and now
	set {_next} to 1 day after {daily.%{_p}%.lastused}
	if {_waited} is less than 24 hours:
		format gui slot 8 of {_p} with minecart named "&7&lDAILY" with lore "&7Next Avaiable: %{_next}%" and "&7┃ &7Already &cClaimed " and "&7╹ &b+100 &7Wrath" to run:
			send "{@shaft} &7Your daily reward was already claimed at &e%{daily.%{_p}%.lastused}%" to {_p}
			settings({_p})
	else:
		if {_waited} is not set:
			set {_m} to "Never Used"
		else:
			set {_m} to "%{daily.%{_p}%.lastused}%"
		format gui slot 8 of {_p} with minecart with chest named "&7&lDAILY" with lore "&7Last Used: %{_m}%" and " &8┃ &7Ready to &aClaim" and " &8╹ &e+100 &7Wrath" to run:
			set {daily.%{_p}%.lastused} to now
			send "{@shaft} &7You claimed your daily reward at &e%now%" to {_p}
			add 100 to {p_wrath::%{_p}%}
			settings({_p})
	set {daily.%{_p}%.lastused} to 1 day before {daily.%{_p}%.lastused}

command /dailyreset [<offline player>]:
	trigger:
		if command executor is op:
			clear {daily.%arg-1%.lastused}
			send "{@admin} &7Reset daily reward of &e%arg-1%"
			send "{@shaft} &7Your daily reward has neen reset" to arg-1
		else:
			send "{@admin} {@permission}"

command /stats [<offline player>]:
	trigger:
		if arg-1 is not set:
			stats(player)
		else:
			stats(arg-1)

function stats(p: player):
	open virtual chest inventory with size 3 named "&e&lSTATS: &8%{_p}%" to {_p}
	format gui slot 2 of {_p} with compass named "&6Position: &f%location of {_p}%" with lore "&7 > For those without F3...?"
	format gui slot 4 of {_p} with head of {_p} named "&7:L%{p_level::%{_p}%}%&8: &e%display name of {_p}%"
	format gui slot 6 of {_p} with clock named "&6Playtime: &f%time played of {_p}%" with lore "&7 > Total time spent online"
	set {_coins} to format({p_coins::%{_p}%})
	set {_totalcoins} to format({p_totalcoins::%{_p}%})
	format gui slot 10 of {_p} with gold block named "&6&lCOINS" with lore "&7Current: &6%{_coins}% &7coins" and "&7Total: &6%{_totalcoins}% &7coins"
	set {_wrath} to format({p_wrath::%{_p}%})
	set {_totalwrath} to format({p_totalwrath::%{_p}%})
	format gui slot 12 of {_p} with bell named "&c&lWRATH" with lore "&7Current: &c%{_wrath}% &7wrath" and "&7Total: &c%{_totalwrath}% &7wrath"
	# set {_total} to format({p_totalstigma::%{_p}%})
	# set {_stigma} to format({p_stigma::%{_p}%})
	format gui slot 14 of {_p} with grass block named "&a&lSTIGMA" with lore "&7Since Last Rebirth: &a%{_stigma}% &7stigma" and "&7Total: &a%{_total}% &7stigma"
	format gui slot 15 of {_p} with cookie named "&b&lVIRTUE" with lore "&7Current: &b%{p_virtue::%{_p}%}%%%" and "&7 > Depends on your current gear"
	format gui slot 16 of {_p} with nether star named "&b&lREBIRTH" with lore "&7Total: &b%{p_rebirth::%{_p}%}% &7times"
	format gui slot 19 of {_p} with zombie skull named "&c&lPvE" with lore "&7Kills: &c%{p_mkill::%{_p}%}% &7mobs killed" and "&7Deaths: &c%{p_mdeath::%{_p}%}% &7deaths"
	format gui slot 20 of {_p} with skeleton skull named "&c&lPvP" with lore "&7Kills: &c%{p_pkill::%{_p}%}% &7players killed" and "&7Deaths: &c%{p_pdeath::%{_p}%}% &7deaths"

function removeLoreLabel(t: text) :: number:
	set {_n} to uncolored {_t}
	replace "Wrath: [+" with "" in {_n}
	replace "]" with "" in {_n}
	set {_r} to {_n} parsed as number
	return {_r}

# changed tool function?
function wrathUpgrade(p: player, i: item, s: integer):
	set {_1} to removeLoreLabel(line 1 of lore of {_i})
	set {_cost} to {_1}^2
	# set {_costFormat} to format({_cost})
	if {p_wrath::%{_p}%} is greater than {_cost}:
		remove {_cost} from {p_wrath::%{_p}%}
		add 1 to {_1}
		set line 1 of lore of {_i} to "&eWrath: &8[&e+%{_1}%&8]"
		set slot {_s} of inventory of {_p} to {_i}
		#tool({_p}, tool of {_p})
	else:
		send "{@shaft} {@wrath}" to {_p}

# function bonusUpgrade(p: player, c: number):
# 	set {_2} to removeLoreLabel(line 2 of lore of tool of {_p})
# 	if {p_coins::%{_p}%} is greater than {_c}:
# 		remove {_c} from {p_coins::%{_p}%}
# 		set {_n2} to {_2} * 2
# 		set line 2 of lore of tool of {_p} to "&b%{_n2}%%% &7Bonus"
# 		tool({_p}, tool of {_p})
# 	else:
# 		send "{@shaft} {@coins}" to {_p}

# function rebirth(p: player):
# 	if {p_block::%{_p}%} is less than 2000:
# 		set {_m} to 2000 - {p_block::%{_p}%}
# 		send "{@shaft} &7You need &c%{_m}% &7more stigma before rebirth" to {_p}
# 	else:
# 		set {_level} to floor({p_stigma::%{_p}%} / 1000)
# 		set {_before} to {p_level::%{_p}%}
# 		if {_before} is less than {_level}:
# 			set {p_level::%{_p}%} to {_level}
# 			set {_dif} to {_level} - {_before}
# 			send "{@shaft} &7Player Level increased from &e%{_before}% &7to &e%{_level}% &7(&e+%{_dif}%&7)" to {_p}
# 		rebirthnew({_p})
# 		set {_blessing} to {blessing} / 100
# 		set {_wrath} to {p_stigma::%{_p}%} * {_blessing}
# 		add {_wrath} to {p_wrath::%{_p}%}
# 		add {_wrath} to {p_totalwrath::%{_p}%}
# 		set {p_stigma::%{_p}%} to 0
# 		set {p_coins::%{_p}%} to 0
# 		set {_m} to format({_wrath})
# 		add 1 to {p_rebirth::%{_p}%}
# 		send "{@shaft} &7You rebirthed and gained &e%{_m}% &7wrath" to {_p}

# function rebirthnew(p: player):
# 	set {_item} to slot 0 of {_p}
# 	set {_bind} to level of curse of binding on {_item}
# 	if {_bind} is not set:
# 		disenchant {_item}
# 	repair {_item}
# 	#set line 2 of lore of {_item} to "&b0.3125%% &7Bonus"
# 	set slot 0 of {_p} to {_item}

# 	set {_item} to slot 1 of {_p}
# 	set {_bind} to level of curse of binding on {_item}
# 	if {_bind} is not set:
# 		disenchant {_item}
# 	repair {_item}
# 	#set line 2 of lore of {_item} to "&b0.3125%% &7Bonus"
# 	set slot 1 of {_p} to {_item}

# 	set {_item} to slot 2 of {_p}
# 	set {_bind} to level of curse of binding on {_item}
# 	if {_bind} is not set:
# 		disenchant {_item}
# 	repair {_item}
# 	#set line 2 of lore of {_item} to "&b0.3125%% &7Bonus"
# 	set slot 2 of {_p} to {_item}

function enchants(p: player, i: item, s: integer):
	open virtual chest inventory with size 1 named "&8Library" to {_p}
	format gui slot 0 of {_p} with {_i}
	set {_l} to level of unbreaking of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 500000
	set {_cf} to format({_c})
	if {_l} is greater or equal to {p_level::%{_p}%}:
		set {_c} to "&c&lMAX"
	format gui slot 2 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Unbreaking" and "&7Increase longevity of the tool" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e%{p_level::%{_p}%}%" and "&7Cost: &e%{_cf}% &7Coins" with all flags hidden to run:
		if {_l} is greater or equal to {p_level::%{_p}%}:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_coins::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "unbreaking %{_new}%" parsed as enchantment type
			set line 2 of lore of {_i} to " &8┃ &7Unbreaking: &e%{_new}%"
			remove {_c} from {p_coins::%{_p}%}
			#send "{@shaft} &7Upgraded &eUnbreaking &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@coins}" to {_p}
		enchants({_p}, {_i}, {_s})
	delete {_l}
	set {_l} to level of efficiency of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 100000
	set {_cf} to format({_c})
	if {_l} is greater or equal to 15:
		set {_c} to "&c&lMAX"
	format gui slot 3 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Efficiency" and "&7Speed at which you mine" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e15" and "&7Cost: &e%{_cf}% &7Coins" with all flags hidden to run: 
		if {_l} is greater or equal to 15:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_coins::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "efficiency %{_new}%" parsed as enchantment type
			set line 3 of lore of {_i} to " &8┃ &7Efficiency: &e%{_new}%"
			remove {_c} from {p_coins::%{_p}%}
			#send "{@shaft} &7Upgraded &eEfficiency &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@coins}" to {_p}
		enchants({_p}, {_i}, {_s})
	delete {_l}
	set {_l} to level of fortune of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 50000
	set {_cf} to format({_c})
	if {_l} is greater or equal to 10:
		set {_c} to "&c&lMAX"
	format gui slot 4 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Fortune" and "&7Increases chances of finding wrath" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e10" and "&7Cost: &e%{_cf}% &7Coins" with all flags hidden to run:
		if {_l} is greater or equal to 10:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_coins::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "fortune %{_new}%" parsed as enchantment type
			set line 4 of lore of {_i} to " &8┃ &7Fortune: &e%{_new}%"
			remove {_c} from {p_coins::%{_p}%}
			#send "{@shaft} &7Upgraded &eFortune &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@coins}" to {_p}
		enchants({_p}, {_i}, {_s})
	delete {_l}
	set {_l} to level of silk touch of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 50000
	set {_cf} to format({_c})
	if {_l} is greater or equal to 10:
		set {_c} to "&c&lMAX"
	format gui slot 5 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Excavate" and "&7Increases chances of uncovering" and "&7Deity fragments" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e10" and "&7Cost: &e%{_cf}% &7Coins" with all flags hidden to run:
		if {_l} is greater or equal to 10:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_coins::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "silk touch %{_new}%" parsed as enchantment type
			set line 5 of lore of {_i} to " &8┃ &7Excavate: &e%{_new}%"
			remove {_c} from {p_coins::%{_p}%}
			#send "{@shaft} &7Upgraded &eSilk Touch &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@coins}" to {_p}
		enchants({_p}, {_i}, {_s})
	delete {_l}
	set {_l} to level of mending of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 100000
	set {_cf} to format({_c})
	if {_l} is greater or equal to 5:
		set {_c} to "&c&lMAX"
	format gui slot 6 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Mending" and "&7Level 5: Increases chances of" and "&7repairing tool when mining" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e5" and "&7Cost: &e%{_cf}% &7Coins" with all flags hidden to run: 
		if {_l} is greater or equal to 5:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_coins::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "mending %{_new}%" parsed as enchantment type
			set line 6 of lore of {_i} to " &8┃ &7Mending: &e%{_new}%"
			remove {_c} from {p_coins::%{_p}%}
			#send "{@shaft} &7Upgraded &eMending &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@coins}" to {_p}
		enchants({_p}, {_i}, {_s})
	delete {_l}
	set {_l} to level of curse of binding of {_i}
	if {_l} is not set:
		set {_l} to 1
	set {_c} to ({_l} + 1) * 100000
	set {_cf} to format({_c})
	if {_l} is greater or equal to 5:
		set {_c} to "&c&lMAX"
	format gui slot 7 of {_p} with shiny book named "&eEnchanted Book" with lore "&9Tools" and "&7Curse of Binding" and "&7Level 5: Keep enchantments after rebirth" and " &8┃ &7Current: &e%{_l}%" and " &8╹ &7Max: &e5" and "&7Cost: &e%{_cf}% &7Wrath" with all flags hidden to run: 
		if {_l} is greater or equal to 5:
			send "{@shaft} &cMax Level" to {_p}
			stop
		if {p_wrath::%{_p}%} is greater than {_c}:
			set {_new} to {_l} + 1
			enchant {_i} with "curse of binding %{_new}%" parsed as enchantment type
			set line 7 of lore of {_i} to " &8╹ &7Binding: &e%{_new}%"
			remove {_c} from {p_wrath::%{_p}%}
			#send "{@shaft} &7Upgraded &eCurse of Binding &7to &e%{_new}%" to {_p}
		else:
			send "{@shaft} {@wrath}" to {_p}
		enchants({_p}, {_i}, {_s})
	set slot {_s} of {_p} to {_i}
	#format gui slot 8 of {_p} with arrow named "&7 < &cBack" with lore "&7Click to go back" to run function tool({_p}, {_i})

# function bowenchant(p: player):
# 	open virtual chest inventory with size 1 named "&8Library" to {_p}
# 	format gui slot 0 of {_p} with held item of {_p}

# function crossbowenchant(p: player):
# 	open virtual chest inventory with size 1 named "&8Library" to {_p}
# 	format gui slot 0 of {_p} with held item of {_p}

# function trident(p: player):
# 	open virtual chest inventory with size 1 named "&8Library" to {_p}
# 	format gui slot 0 of {_p} with held item of {_p}

# function tool(p: player, i: item):
# 	if {_i} is pickaxe:
# 		open virtual chest inventory with size 1 named "&8Pickaxe Upgrades" to {_p}
# 	else if {_i} is axe:
# 		open virtual chest inventory with size 1 named "&8Hatchet Upgrades" to {_p}
# 	else if {_i} is shovel:
# 		open virtual chest inventory with size 1 named "&8Shovel Upgrades" to {_p}
# 	else if {_i} is bow:
# 		open virtual chest inventory with size 1 named "&e&lSOl&6&lAR &8Menu" to {_p}
# 	else if {_i} is crossbow:
# 		open virtual chest inventory with size 1 named "&a&lTERRE&2&lSTRIAl &8Menu" to {_p}	
# 	else if {_i} is trident:
# 		open virtual chest inventory with size 1 named "&b&llUN&3&lAR &8Menu" to {_p}	
# 	set {_1} to removeLoreLabel(line 1 of lore of {_i})
# 	set {_2} to removeLoreLabel(line 2 of lore of {_i})
# 	set {_cost1} to {_1}^2
# 	set {_cost11} to format({_cost1})
# 	set {_cost2} to ({_2} * 10000)^2
# 	set {_cost22} to format({_cost2})
# 	format gui slot 1 of {_p} with bell named "&eWrath: &&e&8┃%{_1}%&8]" with lore "&7 &8╹lick to Upgrade:" and "&7Cost: &e%{_cost11}% &7Wrath" to run function wrathUpgrade({_p}, {_cost1})
# 	# format gui slot 3 of {_p} with emerald named&b&8┃{_2}%%% &7Bonus" with lore "&7 &8╹lick to Upgrade:" and "&7Cost: &e%{_cost22}% &7Coins" to run function bonusUpgrade({_p}, {_cost2})
# 	if tool of {_p} is bow:
# 		format gui slot 5 of {_p} with enchanted book named "&cEnchanting &7Menu" with lore "&7 > Gather up enchantments using &ecoins" to run function bowenchants({_p}, {_i}, {_s})
# 	else if tool of {_p} is crossbow:
# 		format gui slot 5 of {_p} with enchanted book named "&cEnchanting &7Menu" with lore "&7 > Gather up enchantments using &ecoins" to run function crossbownchants({_p})
# 	else if tool of {_p} is trident:
# 		format gui slot 5 of {_p} with enchanted book named "&cEnchanting &7Menu" with lore "&7 > Gather up enchantments using &ecoins" to run function tridentenchants({_p}, {_i}, {_s})
# 	else:
# 		format gui slot 5 of {_p} with enchanted book named "&cEnchanting &7Menu" with lore "&7 > Gather up enchantments using &ecoins" to run function enchants({_p}, {_i}, {_s})
# 	set {_stigma} to {p_stigma::%{_p}%}
# 	set {_stigma2} to format({p_stigma::%{_p}%})
# 	set {_virtue} to format((({p_virtue::%{_p}%} / 100) - 1) * {_stigma})
# 	set {_blessing} to format((({blessing} / 100) - 1) * {_stigma})
# 	format gui slot 7 of {_p} with nether star named "&bRebirth" with lore "&7 > Click to &bRebirth &7and Gain Wrath" and "&7 > %{_stigma2}% &b+%{_virtue}% (%{p_virtue::%{_p}%}%%%) &e+%{_blessing}% (%{blessing}%%%) &7Wrath" to run function rebirth({_p})

function isGlass(p: player, s: integer) :: boolean:
	if slot {_s} of {_p} is light gray stained glass or lime stained glass or light blue stained glass or orange stained glass or black stained glass:
		return true
	return false

function armorUpgrade(p: player):
	open virtual chest inventory with size 4 named "&8Upgrades" to {_p}
	format gui slot 0 of {_p} with helmet of {_p}
	format gui slot 9 of {_p} with chestplate of {_p}
	format gui slot 18 of {_p} with leggings of {_p}
	format gui slot 27 of {_p} with boots of {_p}

function wardrobe(p: player):
	open virtual chest inventory with size 4 named "&8Wardrobe" to {_p}
	format gui slot 2 of {_p} with {2_helmet}
	format gui slot 4 of {_p} with {3_helmet}
	format gui slot 6 of {_p} with {4_helmet}
	format gui slot 8 of {_p} with {5_helmet}
	if helmet of {_p} is light gray stained glass or lime stained glass or light blue stained glass or orange stained glass or black stained glass:
		format gui slot 0 of {_p} with helmet of {_p}
		set {_helmet} to helmet of {_p}
	else if isGlass({_p}, 12) is true:
		format gui slot 0 of {_p} with slot 12 of {_p}
		set {_helmet} to slot 12 of {_p}
	else if isGlass({_p}, 21) is true:
		format gui slot 0 of {_p} with slot 21 of {_p}
		set {_helmet} to slot 21 of {_p}
	else if isGlass({_p}, 22) is true:
		format gui slot 0 of {_p} with slot 22 of {_p}
		set {_helmet} to slot 22 of {_p}
	else if isGlass({_p}, 23) is true:
		format gui slot 0 of {_p} with slot 23 of {_p}
		set {_helmet} to slot 23 of {_p}
	else if isGlass({_p}, 30) is true:
		format gui slot 0 of {_p} with slot 30 of {_p}
		set {_helmet} to slot 30 of {_p}
	else if isGlass({_p}, 31) is true:
		format gui slot 0 of {_p} with slot 31 of {_p}
		set {_helmet} to slot 31 of {_p}
	else if isGlass({_p}, 32) is true:
		format gui slot 0 of {_p} with slot 32 of {_p}
		set {_helmet} to slot 32 of {_p}
	format gui slot 11 of {_p} with {2_chestplate}
	format gui slot 13 of {_p} with {3_chestplate}
	format gui slot 15 of {_p} with {4_chestplate}
	format gui slot 17 of {_p} with {5_chestplate}
	if chestplate of {_p} is chestplate:
		format gui slot 9 of {_p} with chestplate of {_p}
		set {_chestplate} to chestplate of {_p}
	else:
		format gui slot 9 of {_p} with slot 13 of {_p}
		set {_chestplate} to slot 13 of {_p}
	format gui slot 18 of {_p} with leggings of {_p}
	format gui slot 20 of {_p} with {2_leggings}
	format gui slot 22 of {_p} with {3_leggings}
	format gui slot 24 of {_p} with {4_leggings}
	format gui slot 26 of {_p} with {5_leggings}
	set {_leggings} to leggings of {_p}
	format gui slot 29 of {_p} with {2_boots}
	format gui slot 31 of {_p} with {3_boots}
	format gui slot 33 of {_p} with {4_boots}
	format gui slot 35 of {_p} with {5_boots}
	if boots of {_p} is not {hermes}:
		format gui slot 27 of {_p} with boots of {_p}
		set {_boots} to boots of {_p}
	else:
		format gui slot 27 of {_p} with slot 14 of {_p}
		set {_boots} to slot 14 of {_p}

on right click:
	if player's tool is pickaxe or axe or shovel:
		clicked block is set
		if player's tool is wooden axe:
			stop
		if the current hotbar slot of player is 0:
			set {_slot} to 0
		if the current hotbar slot of player is 1:
			set {_slot} to 1
		if the current hotbar slot of player is 2:
			set {_slot} to 2
		set {_tool} to player's tool
		set slot 40 of player to air
		enchants(player, {_tool}, {_slot})
		set slot 40 of player to {1_shield}
		cancel event

# ======== STAFF COMMANDS ======== STAFF COMMANDS ========
# ======== STAFF COMMANDS ======== STAFF COMMANDS ========
# ======== STAFF COMMANDS ======== STAFF COMMANDS ========

command /staffchat [<text>]:
	aliases: /sc
	permission: staff
	permission message: {@staff} {@permission}
	trigger:
		if arg-1 is not set:
			if {staffchat::%player%} is not set:
				set {staffchat::%player%} to true
				send "{@staff} &7Toggle &aENABLED"
			else:
				delete {staffchat::%player%}
				send "{@staff} &7Toggle &cDISABLED"
		else:
			loop all players:
				if loop-player has permission "sc.staffchat":
					send formatted "{@staff} %player's prefix%&r%player's display name%&7: &r%arg 1%" to loop-player
on chat:
	if {staffchat::%player%} is set:
		cancel event
		loop all players:
			if loop-player has permission "sc.staffchat":
				send formatted "{@staff} %player's prefix%&r%player's display name%&7: &r%message%" to loop-player
every 1 second in "{@world}":
	loop all players:
		if {staffchat::%loop-player%} is true:
			send action bar "{@staff} &aEnabled" to loop-player
on chat:
	if player is op:
		stop
	else:
		if {SkCheat::spam.m::%uuid of player%} is message:
			add 1 to {SkCheat::spam.p::%uuid of player%}
			if {SkCheat.spam.notify::%uuid of player%} is not set:
				set {SkCheat.spam.notify::%uuid of player%} to now
			if difference between {SkCheat.spam.notify::%uuid of player%} and now is more than 1 second:
				if {SkCheat::spam.p::%uuid of player%} is greater than 6:
					kick the player due to "{@shaft} You were spamming."
					clear {SkCheat::spam.p::%uuid of player%}
		else:
			set {SkCheat::spam.m::%uuid of player%} to message	
on join:
	clear {SkCheat::spam.p::%uuid of player%}
	clear {SkCheat::spam.m::%uuid of player%}
on disconnect:
	clear {SkCheat::spam.p::%uuid of player%}
	clear {SkCheat::spam.m::%uuid of player%}
command /mutechat:
	permission: staff
	permission message: {@staff} {@permission}
	trigger:
		if {Globalchat} is not set:
			set {Globalchat} to true
			broadcast "{@shaft} &7Chat &cMUTED &7by %player%"
			stop trigger
		if {Globalchat} is set:
			clear {Globalchat}
			broadcast "{@shaft} &7Chat &aUNMUTED &7by %player%"
on chat:
	if {Globalchat} is true:
		if player has permission "chat.mute.bypass":
			stop trigger
		else:
			cancel event
			send "{@shaft} &cChat is currently muted."
command /clearchat:
	permission: staff
	permission message: {@staff} {@permission}
	aliases: /cc
	trigger:
		loop 100 times:
			broadcast ""
		send "{@shaft} &aYou have cleared the chat"
command /clearlag:
	permission: staff
	permission message: {@staff} {@permission}
	trigger:
		set {_n} to size of all entities in "world"
		delete all entities in "world"
		loop {m_maxhealth::*}:
			if {m_maxhealth::%loop-value%} is not a player:
				delete {m_maxhealth::%loop-value%}
		loop {m_health::*}:
			if {m_health::%loop-value%} is not a player:
				delete {m_health::%loop-value%}
		loop {m_damage::*}:
			if {m_damage::%loop-value%} is not a player:
				delete {m_damage::%loop-value%}
		broadcast "{@shaft} &7Cleared &c%{_n}% &7entities"

# ======== ADMIN ======== ADMIN ========
# ======== ADMIN ======== ADMIN ========
# ======== ADMIN ======== ADMIN ========

command /modify [<offline player>] [<text>] [<text>] [<integer>]:
	trigger:
		if player is op:
			if arg-1 is not set:
				send "{@admin} &f/modify &f<player>"
				stop
			else if arg-2 is not "level" or "coins" or "totalcoins" or "wrath" or  "totalwrath" or "exp" or "nextexp" or "totalexp" or "mkill" or "mdeath" or "pkill" or "pdeath" or "rebirth" or "all" or "maxhealth" or "health" or "damage" or "defense" or "maxdefense":
				send "{@admin} &f/modify <%arg-1%> &f<level exp nextexp totalexp coins totalcoins wrath totalwrath mkill mdeath pkill pdeath rebirth maxhealth health damage all defense maxdefense>"
				stop
			else if arg-3 is not "add" or "remove" or "set" or "reset":
				if arg-2 is "reset":
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> &f<reset>"
				else:
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> &f<add remove set reset>"
				stop
			else if arg-4 is not set:
				if arg-3 is not "reset":
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> <%arg-3%> &f<integer>"
					stop
			if arg-3 is "add":
				add arg-4 to {p_%arg-2%::%arg-1%}
				set {_nn} to format(arg-4)
				send "{@admin} &7Added &e%{_nn}% &7to &e%arg-1%&e's &7%arg-2%"
			else if arg-3 is "remove":
				if arg-2 is "level":
					if arg-4 is greater than {p_level::%arg-1%} - 1:
						set {_n} to {p_level::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-2 is "maxhealth":
					if arg-4 is greater than {p_maxhealth::%arg-1%} - 20:
						set {_n} to {p_maxhealth::%arg-1%} - 20
					else:
						set {_n} to arg-4
				else if arg-2 is "health":
					if arg-4 is greater than {p_health::%arg-1%} - 1:
						set {_n} to {p_health::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-2 is "damage":
					if arg-4 is greater than {p_damage::%arg-1%} - 1:
						set {_n} to {p_damage::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-4 is greater than {p_%arg-2%::%arg-1%}:
					set {_n} to {p_%arg-2%::%arg-1%}
				else:
					set {_n} to arg-4
				remove {_n} from {p_%arg-2%::%arg-1%}
				set {_nn} to format({_n})
				send "{@admin} &7Removed &e%{_nn}% &7from &e%arg-1%&e's &7%arg-2%"
			else if arg-3 is "set":
				if arg-2 is "level":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-2 is "maxhealth":
					if arg-4 is less than 20:
						set {_n} to 20
					else:
						set {_n} to arg-4
				else if arg-2 is "health":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-2 is "damage":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-4 is less than 0:
					set {_n} to 0
				else:
					set {_n} to arg-4
				set {p_%arg-2%::%arg-1%} to {_n}
				set {_nn} to format({_n})
				send "{@admin} &7Set &e%arg-1%&e's &7%arg-2% &7to &e%{_nn}%"
			else if arg-3 is "reset":
				if arg-2 is "level":
					set {_n} to 1
				else if arg-2 is "all":
					set {p_level::%arg-1%} to 1
					set {p_coins::%arg-1%} to 0
					set {p_totalcoins::%arg-1%} to 0
					set {p_totalwrath::%arg-1%} to 0
					set {p_wrath::%arg-1%} to 0
					set {p_exp::%arg-1%} to 0
					set {p_totalexp::%arg-1%} to 0
					set {p_mkill::%arg-1%} to 0
					set {p_mdeath::%arg-1%} to 0
					set {p_pkill::%arg-1%} to 0
					set {p_pdeath::%arg-1%} to 0
					set {p_rebirth::%arg-1%} to 0
					set {p_maxhealth::%arg-1%} to 20
					set {p_health::%arg-1%} to 20
					set {p_damage::%arg-1%} to 1
					send "{@admin} &7Reset all for &e%arg-1%"
					stop
				else:
					set {_n} to 0
				set {p_%arg-2%::%arg-1%} to {_n}
				send "{@admin} &7Reset &e%arg-1%&e's &7%arg-2%"
		else:
			send "{@admin} {@permission}"
			
command /loreenchant [<text>] [<integer>]:
	trigger:
		if player is op:
			if player's held item is not set:
				send "{@admin} &7You must be holding a tool"
			if player's held item is pickaxe or axe or shovel:
				if arg-1 is not "unbreaking" or "efficiency" or "fortune" or "excavate" or "mending" or "binding":
					send "{@admin} /loreenchant <unbreaking efficiency efficiency fortune excavate mending binding>"
			else if player's held item is bow:
				if arg-1 is not "power" or "punch" or "flame":
					send "{@admin} /loreenchant <power punch flame>"
			else if player's held item is crossbow:
				if arg-1 is not "quickcharge" or "piercing" or "multishot":
					send "{@admin} /loreenchant <quickcharge piercing multishot>"
			else if player's held item is trident:
				if arg-1 is not "smite" or "knockback" or "channeling":
					send "{@admin} /loreenchant <smite knockback channeling>"
		else:
			send "{@admin} {permission}"