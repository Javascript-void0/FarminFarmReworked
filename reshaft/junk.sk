# ==== SERVER TIME ====

# function timeFormat(t: integer) :: text: 
# 	set {_h} to floor({_t} / 60)
# 	set {_m} to {_t} - ({_h} * 60)
# 	if {_h} is less than 10:
# 		set {_h} to "0%{_h}%"
# 	if {_m} is 0:
# 		set {_m} to "00"
# 	else if {_m} is less than 10:
# 		set {_m} to "0%{_m}%"
# 	set {_time} to "%{_h}%:%{_m}%"
# 	return {_time}

# command /servertime [<integer>]:
# 	trigger:
# 		if player is op:
# 			if arg-1 is not set:
# 				send "{@admin} /servertime <integer>"
# 			else if arg-1 is greater than 1440:
# 				set {_time} to 1440
# 			else:
# 				set {_time} to arg-1
# 			set {servertime} to {_time}
# 			set {_format} to timeFormat({_time})
# 			send "{@admin} &7Server time set to &e%{_format}% &7(&e%{servertime}%&et&7)"
# 			# send "```Time: %{servertime}%```" to channel with id "886738161491914772" with "ReShaft"
# 		else:
# 			send "{@admin} {@permission}"

# every 1 minute in "{@world}":
# 	add 1 to {servertime}
# 	if {servertime} is greater than 1440:
# 		set {servertime} to 0
# 	if mod({servertime}, 60) is 0:
# 		set {_format} to timeFormat({servertime})
# 		broadcast "{@shaft} &7Server Time: &e%{_format}% &7(&e%{servertime}%t&7)"
    # send "```Time: %{servertime}%```" to channel with id "886738161491914772" with "ReShaft"

# function hat(p: player, i: item, s: integer):
# 	set {_cur} to helmet of {_p}
# 	set helmet of {_p} to {_i}
# 	set slot {_s} of {_p} to {_cur}

# function hatreset(p: player):
# 	set {_12} to slot 12 of {_p}
# 	if {_12} is light gray stained glass:
# 		set {_item} to {_12}
# 		set {_slot} to 12
# 	set {_13} to slot 13 of {_p}
# 	if {_13} is light gray stained glass:
# 		set {_item} to {_13}
# 		set {_slot} to 13
# 	set {_14} to slot 14 of {_p}
# 	if {_14} is light gray stained glass:
# 		set {_item} to {_14}
# 		set {_slot} to 14
# 	set {_21} to slot 21 of {_p}
# 	if {_21} is light gray stained glass:
# 		set {_item} to {_21}
# 		set {_slot} to 21
# 	set {_23} to slot 23 of {_p}
# 	if {_23} is light gray stained glass:
# 		set {_item} to {_23}
# 		set {_slot} to 23
# 	set {_14} to slot 22 of {_p}
# 	if {_14} is light gray stained glass:
# 		set {_item} to {_14}
# 		set {_slot} to 22
# 	set {_30} to slot 30 of {_p}
# 	if {_30} is light gray stained glass:
# 		set {_item} to {_30}
# 		set {_slot} to 30
# 	set {_cur} to helmet of {_p}
# 	if {_cur} is not light gray stained glass:
# 		hat({_p}, {_item}, {_slot})
# 	remove absorption from {_p}
# 	remove resistance from {_p}
# 	set flight mode of {_p} to false

# function unlock(p: player, c: integer, s: integer):
# 	if {p_wrath::%{_p}%} is greater than {_c}:
# 		remove {_c} from {p_wrath::%{_p}%}
# 		if {_s} is 12:
# 			set slot 12 of {_p} to {pegasus}
# 			send "{@shaft} &7Unlocked &bPegasus" to {_p}
# 		if {_s} is 13:
# 			set slot 13 of {_p} to {athena}
# 			send "{@shaft} &7Unlocked &bAthena" to {_p}
# 		if {_s} is 14:
# 			set slot 14 of {_p} to {poseidon}
# 			send "{@shaft} &7Unlocked &bPoseidon" to {_p}
# 		if {_s} is 21:
# 			set slot 21 of {_p} to {apollo}
# 			send "{@shaft} &7Unlocked &bApollo" to {_p}
# 		if {_s} is 22:
# 			set slot 22 of {_p} to {hades}
# 			send "{@shaft} &7Unlocked &bHades" to {_p}
# 		if {_s} is 23:
# 			set slot 23 of {_p} to {kronos}
# 			send "{@shaft} &7Unlocked &bKronos" to {_p}
# 		if {_s} is 30:
# 			set slot 30 of {_p} to {talaria}
# 			send "{@shaft} &7Unlocked &bTalaria" to {_p}
# 		if {_s} is 31:
# 			set slot 31 of {_p} to {zeus}
# 			send "{@shaft} &7Unlocked &bZeus" to {_p}
# 		if {_s} is 32:
# 			set slot 32 of {_p} to {hermes}
# 			send "{@shaft} &7Unlocked &bHermes" to {_p}
# 	else:
# 		send "{@shaft} {@wrath}" to {_p}

on load:
	set {hex::*} to split "0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|k|l|m|n|o|r" at "|"
 
function rgbToHex(values: numbers) :: string:
	loop {_values::*}:
		set {_r} to "%{_r} ? ""<##""%%{hex::%(( (round(loop-value)) - mod((round(loop-value)), 16)) / 16 + 1)%} ? """"%%{hex::%mod((round(loop-value)), 16) + 1%} ? """"%"
	return colored "%{_r}%>"

function gradient(input: string, color-from: integers, color-to: integers) :: string:
	loop {_color-from::*}:
		set {_i::%loop-index%} to ({_color-to::%loop-index%} - loop-value) / length of {_input}
	loop length of {_input} times:
		if subtext of {_input} from indices loop-number - 1 to loop-number - 1 = "ยง":
			set {_format} to "%{_format} ? """"%&%subtext of {_input} from indices loop-number to loop-number%" if {hex::*} contains subtext of {_input} from indices loop-number to loop-number
			clear {_format} if subtext of {_input} from indices loop-number to loop-number = "r"
			continue loop
		set {_r} to "%{_r} ? """"%%rgbToHex({_color-from::*})%%{_format} ? """"%%subtext of {_input} from indices loop-number to loop-number%"
		set {_color-from::*} to ({_color-from::1} + {_i::1}), ({_color-from::2} + {_i::2}) and ({_color-from::3} + {_i::3})
	return colored {_r}