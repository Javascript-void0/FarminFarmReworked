function copyDungeon(loc: location, name: text, yt: integer, zt: integer, xt: integer):
	remove 3 from y-coordinate of {_loc}
	set {_n} to {_zt} / 2
	remove floor({_n}) from z-coordinate of {_loc}
	set {_x} to x-location of {_loc}
	set {_y} to y-location of {_loc}
	set {_z} to z-location of {_loc}
	loop {_yt} times:
		loop {_zt} times:
			loop {_xt} times:
				set {_offsetX} to x-location of {_loc} - {_x}
				set {_offsetY} to y-location of {_loc} - {_y}
				set {_offsetZ} to z-location of {_loc} - {_z}
				set {d_%{_name}%::%{_offsetX}%.%{_offsetY}%.%{_offsetZ}%} to block at {_loc}
				set {d_%{_name}%::dimensions} to "%{_yt}%, %{_zt}%, %{_xt}%"
				add 1 to x-coordinate of {_loc}
			set x-coordinate of {_loc} to {_x}
			add 1 to z-coordinate of {_loc}
		set z-coordinate of {_loc} to {_z}
		add 1 to y-coordinate of {_loc}
	set y-coordinate of {_loc} to {_y}

function pasteDungeon(loc: location, name: text, p: player) :: number: 
	set {_dimensions::*} to {d_%{_name}%::dimensions} split by ", "
	remove 3 from y-coordinate of {_loc}
	set {_n} to ({_dimensions::2} parsed as integer) / 2
	remove floor({_n}) from z-coordinate of {_loc}
	set {_x} to x-location of {_loc}
	set {_z} to z-location of {_loc}
	set {_y} to y-location of {_loc}
	set {_n} to 0
	loop ({_dimensions::1} parsed as integer) times:
		loop ({_dimensions::2} parsed as integer) times:
			loop ({_dimensions::3} parsed as integer) times:
				set {_offsetX} to loop-number-3
				remove 1 from {_offsetX}
				set {_offsetZ} to loop-number-2
				remove 1 from {_offsetZ}
				set {_offsetY} to loop-number-1
				remove 1 from {_offsetY}
				set block at {_loc} to {d_%{_name}%::%{_offsetX}%.%{_offsetY}%.%{_offsetZ}%}
				if block at {_loc} is trapped chest:
					chance of 80%:
						set block at {_loc} to air
				else if block at {_loc} is netherite block:
					add 1 to {_n}
					spawnMob({_loc}, {_p}, 0)
				else if block at {_loc} is bone block:
					add 1 to {_n}
					spawnMob({_loc}, {_p}, 2)
				else if block at {_loc} is black concrete:
					set block at {_loc} to black concrete
				else if block at {_loc} is obsidian:
					set block at {_loc} to stone
				add 1 to x-coordinate of {_loc}
			set x-coordinate of {_loc} to {_x}
			add 1 to z-coordinate of {_loc}
		set z-coordinate of {_loc} to {_z}
		add 1 to y-coordinate of {_loc}
	set y-coordinate of {_loc} to {_y}

	add 1 to {p_totalroom::%{_p}%}
	add 1 to {dungeon::%{_p}%::runroom}

	return {_n}

function spawnMob(loc: location, p: player, nn: number):
	if {_nn} is 0:
		set {_n} to random integer between 1 and 8
	else:
		set {_n} to {_nn}
	if {_n} is 1:
		boneWarrior({_loc}, {_p})
	else if {_n} is 2:
		boneArcher({_loc}, {_p})
	else if {_n} is 3:
		orcCaptain({_loc}, {_p})
	else if {_n} is 4:
		orcWarrior({_loc}, {_p})
	else if {_n} is 5:
		elfWarrior({_loc}, {_p})
	else if {_n} is 6:
		elfCaptain({_loc}, {_p})
	else if {_n} is 7:
		spiritArcher({_loc}, {_p})
	else if {_n} is 8:
		spiritWarrior({_loc}, {_p})

function dungeonDoor(l: location):
	set {_x} to x-coordinate of {_l} + 2
	set {_y} to y-coordinate of {_l} + 1
	set {_z} to z-coordinate of {_l} - 1
	set {_corner} to location({_x}, {_y}, {_z}, world "dungeon")
	loop 3 times:
		loop 3 times:
			# block at {_corner} is black concrete
			set block at {_corner} to gray concrete
			add 1 to z-coordinate of {_corner}
		add 1 to y-coordinate of {_corner}
		set z-coordinate of {_corner} to {_z}
		wait 0.05 second
	set {_corner} to location({_x}, {_y}, {_z}, world "dungeon")
	loop 3 times:
		loop 3 times:
			set block at {_corner} to air
			show 3 small smoke at {_corner}
			add 1 to z-coordinate of {_corner}
		add 1 to y-coordinate of {_corner}
		set z-coordinate of {_corner} to {_z}
		wait 0.08 second

on tab complete of "/dungeon":
	set tab completions for position 1 to "wand", "clearStart", "listStart", "listRoom", "copyRoom", "deleteRoom", "saveRoom", "loadRoom", "removeRoom", "start", "end", "openAll", "deleteStart", and "pasteRoom"
	set tab completions for position 2 to {d_roomList::*}
	set tab completions for position 3 to "11" and "21"
	set tab completions for position 4 to "11" and "21"
	set tab completions for position 5 to "11" and "21"

command /dungeon [<text>] [<text>] [<integer>] [<integer>] [<integer>]:
	trigger:
		if player is not op:
			send "no permission"
			stop
		if arg-1 is not set:
			if {activeDungeon::%player%} is set:
				send "&aActive Dungeon: &7%{activeDungeon::%player%}%"
			else:
				send "&cActive Dungeon: &7none"
		if arg-1 is "clearStart":
			delete {dungeonStart::*}
			send "deleted all dungeon start"
			stop
		else if arg-1 is "deleteStart":
			if arg-2 is set:
				set {_i} to arg-2 parsed as number
				set {_n} to 1
				loop {dungeonStart::*}:
					if {_n} is {_i}:
						send "Deleted %loop-index%"
						delete {dungeonStart::%loop-index%}
					else:
						add 1 to {_n}
		else if arg-1 is "listStart":
			set {_n} to 0
			loop {dungeonStart::*}:
				if block at loop-value is emerald block:
					set {_status} to "&aOpen: "
				else if block at loop-value is redstone block:
					set {_status} to "&cActive: "
				else if block at loop-value is coal block:
					set {_status} to "&8Disabled: "
				else:
					set {_status} to "%{_n}%. &7Error: (%block at loop-value%)"
				add 1 to {_n}
				send "%{_n}%. %{_status}%%loop-index%, &7%loop-value%"
		else if arg-1 is "listRoom":
			loop {d_roomList::*}:
				send "&f%loop-value%&7: %{d_%loop-value%::dimensions}%"
		else if arg-1 is "copyRoom" or "saveRoom":
			if arg-2 is not set:
				send "/dungeon <copy> <name>"
			else if arg-3 is not set:
				send "/dungeon <copy> <%arg-2%> <dim-y> <dim-z> <dim-x>"
			else if arg-4 is not set:
				send "/dungeon <copy> <%arg-2%> <%arg-3%> <dim-z> <dim-x>"
			else if arg-5 is not set:
				send "/dungeon <copy> <%arg-2%> <%arg-3%> <%arg-4%> <dim-x>"
			else:
				copyDungeon({dungeonStart.pos}, arg-2, arg-3, arg-4, arg-5)
				send "copied new dungeon to %arg-2%"
				if {d_roomList::*} does not contain arg-2:
					add arg-2 to {d_roomList::*}
				stop
		else if arg-1 is "pasteRoom" or "loadRoom":
			if arg-2 is not set:
				send "/dungeon <paste> <name>"
				stop
			else:
				set {_} to pasteDungeon({dungeonStart.pos}, arg-2, player)
				set {dungeon::%player%::mobRemain} to 0
				send "pasted %arg-2%"
				if arg-2 is "start":
					set {_x} to x-coordinate of {dungeonStart.pos} + 7
					set {_y} to y-coordinate of {dungeonStart.pos} + 1
					set {_z} to z-coordinate of {dungeonStart.pos}
					teleport player to location({_x}, {_y}, {_z}, world "dungeon", -90, 0)
				stop
		else if arg-1 is "deleteRoom" or "removeRoom":
			if arg-2 is not set:
				send "/dungeon <delete> <name>"
				stop
			else:
				send "deleted %arg-2%"
				if {d_roomList::*} contains arg-2:
					remove arg-2 from {d_roomList::*}
				stop
		else if arg-1 is "start":
			# {dungeonActive::%player%} is not set
			loop {dungeonStart::*}:
				if block at loop-value is emerald block:
					send "&aOpen: &7%loop-index%, %loop-value%"
					dungeonStart(player, loop-value)
					stop
				else if block at loop-value is redstone block:
					send "&cActive: &7%loop-index%, %loop-value%"
					add z-coordinate of loop-value to {_z::*}
				else if block at loop-value is coal block:
					send "&7Saved: &7%loop-index%, %loop-value%"
					add z-coordinate of loop-value to {_z::*}
			set {_last} to largest({_z::*}) # largest of existing dungeons
			dungeonStart(player, location(-207.5, 7.5, {_last} + 28, world "dungeon", -90, 0))
		else if arg-1 is "end":
			dungeonEnd(player)
		else if arg-1 is "openAll":
			loop {dungeonStart::*}:
				set block at loop-value to emerald block
		else if arg-1 is "wand":
			give player blaze rod

function dungeonStart(p: player, l: location):
	pasteDungeon({_l}, "start", {_p})
	set {dungeonStart::%{_l}%} to {_l}
	set yaw of {dungeonStart::%{_l}%} to -90
	set pitch of {dungeonStart::%{_l}%} to 0
	set {dungeon::%{_p}%::mobRemain} to 0
	set {dungeonActive::%{_p}%} to {_l}
	set {dungeon::%{_p}%::floor} to 1
	set {dungeon::%{_p}%::room} to 1
	set {dungeon::%{_p}%::roomnum} to random integer between 10 and 20
	set {dungeon::%{_p}%::runroom} to 0
	set {dungeon::%{_p}%::runkill} to 0
	add 7 to x-coordinate of {_l}
	add 1 to y-coordinate of {_l}
	teleport {_p} to {_l}
	set block at {dungeonActive::%{_p}%} to redstone block

function dungeonSave(p: player):
	if {dungeonActive::%{_p}%} is set:
		set {dungeon::%{_p}%::mobRemain} to 0
		set block at {dungeonActive::%{_p}%} to coal block
		clearMob({_p})
		set {lastLogin::%{_p}%} to now
		world of {_p} is "dungeon"
		set {dungeon::%{_p}%::lastspot} to location of {_p}

function dungeonEnd(p: player):
	if {dungeonActive::%{_p}%} is set:

		if {dungeon::%{_p}%::floor} is greater than {p_highestfloor::%{_p}%}:
			set {p_highestfloor::%{_p}%} to {dungeon::%{_p}%::floor}

		set {_} to pasteDungeon({dungeonActive::%{_p}%}, "start", {_p})
		# send "&4Restarted: &c%{dungeonActive::%{_p}%}%" to {_p}
		set block at {dungeonActive::%{_p}%} to emerald block
		delete {dungeonActive::%{_p}%}
		delete {dungeon::%{_p}%::*}
		clearMob({_p})
	else:
		send "&4Restarted: &cNo Active Dungeon" to {_p}

on disconnect:
	dungeonSave(player)

on join:
	{dungeonActive::%player%} is set
	set block at {dungeonActive::%player%} to emerald block

on left click with blaze rod:
	cancel event
	player is op
	if event-block is obsidian or lapis lazuli block or diamond block or emerald block:
		set {dungeonStart.pos} to location of event-block
		send "&3Selection: &7%location of event-block%"
	else if event-block is redstone block or emerald block:
		if {dungeonStart::%location of event-block%} is set:
			delete {dungeonStart::%location of event-block%}
			send "removed %location of event-block%"
		else:
			set {dungeonStart::%location of event-block%} to location of event-block
			set yaw of {dungeonStart::%location of event-block%} to -90
			set pitch of {dungeonStart::%location of event-block%} to 0
			send "added %location of event-block%"
	else if event-block is coal block:
		loop {dungeonActive::*}:
			loop-value is {dungeonStart::%location of event-block%}
			send "Dungeon save of &c%loop-index%"
			send "Last Login: &e%{lastLogin::%loop-index%}%"

on walking on lodestone:
	world of player is "dungeon"
	{dungeonActive::%player%} is set
	# {dungeon::%{_p}%::mobRemain} is 0
	if {dungeon::%player%::room} is less than {dungeon::%player%::roomnum} - 1:
		loop {d_roomList::*}:
			loop-value does not contain "Empty"
			loop-value is not "start"
			loop-value is not "corridor"
			add loop-value to {_list::*}
			set {_room} to random element out of {_list::*}
	else:
		set {_room} to "corridor"
	set {_nextRoom} to location of event-block
	add 2 to x-coordinate of {_nextRoom}
	set {_n} to pasteDungeon({_nextRoom}, {_room}, player)
	dungeonDoor(location of event-block)
	set {dungeon::%player%::mobRemain} to {_n}
	set event-block to stone bricks
	add 1 to {dungeon::%player%::room}

on walking on diamond block:
	world of player is "dungeon"
	{dungeonActive::%player%} is set
	set {_} to pasteDungeon({dungeonActive::%player%}, "start", player)
	set {dungeon::%player%::mobRemain} to 0
	set event-block to stone bricks
	set {dungeon::%player%::room} to 1
	set {dungeon::%player%::roomnum} to random integer between 10 and 20
	add 1 to {dungeon::%player%::floor}
	set {_x} to x-coordinate of {dungeonActive::%player%}
	set {_y} to y-coordinate of {dungeonActive::%player%}
	set {_z} to z-coordinate of {dungeonActive::%player%}
	teleport player to location({_x} + 7, {_y} + 1, {_z}, world "dungeon", -90, 0)
	set block at {dungeonActive::%player%} to redstone block
	clearMob(player)
	chatlog(player, "floor")