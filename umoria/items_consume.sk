function healthConsume(p: player, n: number):
	set {p_health::%{_p}%} to {p_health::%{_p}%} + {_n}
	if {p_health::%{_p}%} is greater than {p_maxhealth::%{_p}%}:
		set {p_health::%{_p}%} to {p_maxhealth::%{_p}%}

function damageConsume(p: player, n: number):
	if {consumeStatus.%{_p}%} is not set:
		set {beforeConsume.%{_p}%} to {p_damage::%{_p}%}
	set {consumeStatus.%{_p}%} to true
	set {p_damage::%{_p}%} to {p_damage::%{_p}%} + {_n}
	if {p_damage::%{_p}%} is less than 1:
		set {p_damage::%{_p}%} to 1

function restoreConsume(p: player, t: text):
	if {consumeStatus.%{_p}%} is set:
		chatlog({_p}, "consume status", {_t})
		set {p_damage::%{_p}%} to {beforeConsume.%{_p}%}
		delete {beforeConsume.%{_p}%}
	delete {consumeStatus.%{_p}%}

on right click:

	if 1 of event-item is {mobloot::common::flesh}:
		set {_h} to floor({p_maxhealth::%player%} * 0.2)
		set {_d} to floor({p_damage::%player%} * 0.1) * -1
		healthConsume(player, {_h})
		damageConsume(player, {_d})
		remove 1 of event-item from inventory of player
		chatlog(player, "consume flesh")
		wait 5 minutes
		restoreConsume(player, "flesh")

	else if 1 of event-item is {mobloot::rare::pancreas}:
		set {_h} to floor({p_maxhealth::%player%} * 0.4)
		set {_d} to floor({p_damage::%player%} * 0.2) * -1
		healthConsume(player, {_h})
		damageConsume(player, {_d})
		remove 1 of event-item from inventory of player
		chatlog(player, "consume pancreas")
		wait 2 minutes
		restoreConsume(player, "pancreas")

	else if 1 of event-item is {mobloot::rare::qu_eggs}:
		set {_d} to floor({p_damage::%player%} * 0.2)
		damageConsume(player, 2)
		remove 1 of event-item from inventory of player
		chatlog(player, "consume qu_eggs")
		wait 2 minutes
		restoreConsume(player, "quail eggs")

	if {p_health::%player%} is less than 1:
		death(player)