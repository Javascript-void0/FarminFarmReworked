options:
	color: <##B4C788>
	prefix: &8[<##B4C788>&lUMORIA&8]&7
	permission: &7Insufficient Permissions
	admin: &8[<##B4C788>&lADMIN&8]&7
	world: world

function adminFormat(n: number) :: text:
	set {_data} to "f,18|e,15|d,12|c,9|b,6|a,3"
	loop split {_data} at "|":
		set {_s::*} to split loop-value at ","
		{_n} >= 10 ^ {_s::2} parsed as number
		set {_nn} to adminRound({_n} / 10 ^ {_s::2} parsed as number, 1)
		return "%{_nn}%%{_s::1}%"
	return "%{_n}%"

function adminRound(n: number, to: number) :: number:
   return floor(({_n} * 10^{_to}) + 0.5) / 10^{_to}

on tab complete of "/modify":
	set tab completions for position 2 to "level", "coins", "totalcoins", "wrath", "totalwrath", "exp", "nextexp", "totalexp", "kill", "death", "rebirth", "all", "maxhealth", "health", "damage", "defense", "bank", and "maxdefense"
	set tab completions for position 3 to "add", "remove", "set", and "reset"

command /modify [<offline player>] [<text>] [<text>] [<integer>]:
	trigger:
		if player is op:
			if arg-1 is not set:
				send "{@admin} &f/modify &f<player>"
				stop
			else if arg-2 is not "level" or "coins" or "totalcoins" or "wrath" or  "totalwrath" or "exp" or "nextexp" or "totalexp" or "kill" or "death" or "rebirth" or "all" or "maxhealth" or "bank" or "health" or "damage" or "defense" or "maxdefense":
				send "{@admin} &f/modify <%arg-1%> &f<level exp nextexp totalexp coins totalcoins wrath totalwrath death kill rebirth maxhealth health damage all defense maxdefense>"
				stop
			else if arg-3 is not "add" or "remove" or "set" or "reset":
				if arg-2 is "reset":
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> &f<reset>"
				else:
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> &f<add remove set reset>"
				stop
			else if arg-4 is not set:
				if arg-3 is not "reset":
					send "{@admin} &f/modify <%arg-1%> <%arg-2%> <%arg-3%> &f<integer>"
					stop
			if arg-3 is "add":
				add arg-4 to {p_%arg-2%::%arg-1%}
				set {_nn} to adminFormat(arg-4)
				send "{@admin} &7Added {@color}%{_nn}% &7to %arg-1% &7%arg-2%"
			else if arg-3 is "remove":
				if arg-2 is "level":
					if arg-4 is greater than {p_level::%arg-1%} - 1:
						set {_n} to {p_level::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-2 is "maxhealth":
					if arg-4 is greater than {p_maxhealth::%arg-1%} - 20:
						set {_n} to {p_maxhealth::%arg-1%} - 20
					else:
						set {_n} to arg-4
				else if arg-2 is "health":
					if arg-4 is greater than {p_health::%arg-1%} - 1:
						set {_n} to {p_health::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-2 is "damage":
					if arg-4 is greater than {p_damage::%arg-1%} - 1:
						set {_n} to {p_damage::%arg-1%} - 1
					else:
						set {_n} to arg-4
				else if arg-4 is greater than {p_%arg-2%::%arg-1%}:
					set {_n} to {p_%arg-2%::%arg-1%}
				else:
					set {_n} to arg-4
				remove {_n} from {p_%arg-2%::%arg-1%}
				set {_nn} to adminFormat({_n})
				send "{@admin} &7Removed {@color}%{_nn}% &7from %arg-1% &7%arg-2%"
			else if arg-3 is "set":
				if arg-2 is "level":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-2 is "maxhealth":
					if arg-4 is less than 20:
						set {_n} to 20
					else:
						set {_n} to arg-4
				else if arg-2 is "health":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-2 is "damage":
					if arg-4 is less than 1:
						set {_n} to 1
					else:
						set {_n} to arg-4
				else if arg-4 is less than 0:
					set {_n} to 0
				else:
					set {_n} to arg-4
				set {p_%arg-2%::%arg-1%} to {_n}
				set {_nn} to adminFormat({_n})
				send "{@admin} &7Set %arg-1% &7%arg-2% &7to {@color}%{_nn}%"
			else if arg-3 is "reset":
				if arg-2 is "level" or "damage":
					set {_n} to 1
				else if arg-2 is "all":
					set {p_level::%arg-1%} to 1
					set {p_coins::%arg-1%} to 0
					set {p_totalcoins::%arg-1%} to 0
					set {p_totalwrath::%arg-1%} to 0
					set {p_wrath::%arg-1%} to 0
					set {p_exp::%arg-1%} to 0
					set {p_totalexp::%arg-1%} to 0
					set {p_kill::%arg-1%} to 0
					set {p_death::%arg-1%} to 0
					set {p_rebirth::%arg-1%} to 0
					set {p_maxhealth::%arg-1%} to 20
					set {p_health::%arg-1%} to 20
					set {p_damage::%arg-1%} to 1
					set {p_bank::%arg-1%} to 0
					send "{@admin} &7Reset all for {@color}%arg-1%"
					stop
				else:
					set {_n} to 0
				set {p_%arg-2%::%arg-1%} to {_n}
				send "{@admin} &7Reset %arg-1% &7%arg-2%"
		else:
			send "{@admin} {@permission}"
			
function removeEnch(i: item, e: enchantment):
	loop enchantments of {_i}:
		add "%loop-value%" parsed as an enchantment type to {_e::*}
	disenchant {_i}
	loop {_e::*}:
		if "%loop-value%" does not contain "%{_e}%":
			enchant {_i} with loop-value

on tab complete of "/enchant":
	if player's held item is sword:
		set tab completions for position 1 to "sharpness", "looting", "mending", and "binding"
	else if player's held item is pickaxe or hoe:
		set tab completions for position 1 to "efficiency", "fortune", "mending", and "binding"
	else if player's held item is bow:
		set tab completions for position 1 to "power", "infinity", "mending", and "binding"
	else if player's held item is shield:
		set tab completions for position 1 to "unbreaking", "thorns", "mending", and "binding"
	else if player's held item is helmet or chestplate or leggings or boots:
		set tab completions for position 1 to "protection", "thorns", "mending", and "binding"

command /enchant [<text>] [<integer>]:
	trigger:
		if player is op:
			if player's held item is not set:
				send "{@admin} &7You must be holding a tool"
			else if player's held item is not pickaxe or sword or bow or hoe or shield or helmet or chestplate or leggings or boots:
				send "{@admin} &7You can not enchant that"

			if arg-2 is not set:
				stop
			if arg-1 is "mending":
				set line 11 of player's tool's lore to " &8┃ &7Mending: {@color}%arg-2%"					
				removeEnch(player's tool, mending)
				enchant player's tool with "mending %arg-2%" parsed as enchantment type
				send "{@admin} Enchanted with {@color}Mending %arg-2%"
			else if arg-1 is "binding":
				set line 12 of player's tool's lore to " &8╹ &7Binding: {@color}%arg-2%"					
				removeEnch(player's tool, curse of binding)
				enchant player's tool with "curse of binding %arg-2%" parsed as enchantment type
				send "{@admin} Enchanted with {@color}Binding %arg-2%"

			# SWORD
			# SWORD
			# SWORD

			else if player's held item is sword:
				if arg-1 is "sharpness":
					# set {_split::*} to uncoloured line 2 of player's tool's lore parsed as " ┃ Sharpness: %number%"
					# send "%{_split::1}%" to the player
					set line 9 of player's tool's lore to " &8┃ &7Sharpness: {@color}%arg-2%"					
					removeEnch(player's tool, sharpness)
					enchant player's tool with "sharpness %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Sharpness %arg-2%"
				else if arg-1 is "looting":
					set line 10 of player's tool's lore to " &8┃ &7Looting: {@color}%arg-2%"					
					removeEnch(player's tool, looting)
					enchant player's tool with "looting %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Looting %arg-2%"
			
			# PICKAXE / SCYTHE
			# PICKAXE / SCYTHE
			# PICKAXE / SCYTHE
			
			else if player's held item is pickaxe or hoe:
				if arg-1 is "efficiency":
					set line 9 of player's tool's lore to " &8┃ &7Efficiency: {@color}%arg-2%"					
					removeEnch(player's tool, efficiency)
					enchant player's tool with "efficiency %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Efficiency %arg-2%"
				else if arg-1 is "fortune":
					set line 10 of player's tool's lore to " &8┃ &7Fortune: {@color}%arg-2%"					
					removeEnch(player's tool, fortune)
					enchant player's tool with "fortune %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Fortune %arg-2%"
			
			# BOW
			# BOW
			# BOW
			
			else if player's held item is bow:
				if arg-1 is "power":
					set line 9 of player's tool's lore to " &8┃ &7Power: {@color}%arg-2%"					
					removeEnch(player's tool, power)
					enchant player's tool with "power %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Power %arg-2%"
				else if arg-1 is "infinity":
					set line 10 of player's tool's lore to " &8┃ &7Infinity: {@color}%arg-2%"					
					removeEnch(player's tool, infinity)
					enchant player's tool with "infinity %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Infinity %arg-2%"
					
			# SHIELD
			# SHIELD
			# SHIELD
			
			else if player's held item is shield:
				if arg-1 is "unbreaking":
					set line 9 of player's tool's lore to " &8┃ &7Unbreaking: {@color}%arg-2%"					
					removeEnch(player's tool, unbreaking)
					enchant player's tool with "unbreaking %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Unbreaking %arg-2%"
				else if arg-1 is "thorns":
					set line 10 of player's tool's lore to " &8┃ &7Thorns: {@color}%arg-2%"					
					removeEnch(player's tool, thorns)
					enchant player's tool with "thorns %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Thorns %arg-2%"
			
			# ARMOR
			# ARMOR
			# ARMOR
			
			else if player's held item is helmet or chestplate or leggings or boots:
				if arg-1 is "protection":
					set line 9 of player's tool's lore to " &8┃ &7Protection: {@color}%arg-2%"					
					removeEnch(player's tool, protection)
					enchant player's tool with "protection %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Protection %arg-2%"
				else if arg-1 is "thorns":
					set line 10 of player's tool's lore to " &8┃ &7Thorns: {@color}%arg-2%"					
					removeEnch(player's tool, thorns)
					enchant player's tool with "thorns %arg-2%" parsed as enchantment type
					send "{@admin} Enchanted with {@color}Thorns %arg-2%"
		
		else:
			send "{@admin} {permission}"

command /listenchants:
	trigger:
		if player is op:
			loop enchantments of player's held item:
				send "%loop-value%"
		else:
			send "{@admin} {@permission}"