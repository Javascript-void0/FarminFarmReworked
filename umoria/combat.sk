options:
	color: <##B4C788>
	prefix: &8[<##B4C788>&lUMORIA&8]&r
	permission: &7Insufficient Permissions
	admin: &8[<##B4C788>&lADMIN&8]&r
	world: world

command /pvp:
	trigger:
		pvpToggle(player)

function pvpToggle(p: player):
	if {pvp::%{_p}%} is not set:
		set {pvp::%{_p}%} to false
		send "{@prefix} &7PvP turned off" to {_p}
	else if {pvp::%{_p}%} is true:
		set {pvp::%{_p}%} to false
		send "{@prefix} &7PvP turned off" to {_p}
	else if {pvp::%{_p}%} is false:
		set {pvp::%{_p}%} to true
		send "{@prefix} &7PvP turned on" to {_p}

function combatFormat(n: number) :: text:
	set {_data} to "f,18:e,15:d,12:3,9:b,6:a,3"
	loop split {_data} at ":":
		set {_s::*} to split loop-value at ","
		{_n} >= 10 ^ {_s::2} parsed as number
		set {_nn} to combatRound({_n} / 10 ^ {_s::2} parsed as number, 1)
		return "%{_nn}%%{_s::1}%"
	return "%{_n}%"

function combatRound(n: number, to: number) :: number:
   return floor(({_n} * 10^{_to}) + 0.5) / 10^{_to}

every 5 tick:
	loop all players:
		if {staffchat::%loop-player%} is not set:
			set {_health} to combatFormat({p_health::%loop-player%})
			set {_maxhealth} to combatFormat({p_maxhealth::%loop-player%})
			set {_damage} to combatFormat({p_damage::%loop-player%})
			send action bar "{@color}%{_health}%/%{_maxhealth}% ❤ &8| {@color}%{p_defense::%loop-player%}%/%{p_maxdefense::%loop-player%}% def &8| {@color}%{_damage}% dmg" to loop-player

on damage:
    attacker is player
    victim is player
    cancel event

			# else if attacker is a player:
			# 	victim is player
			# 	add 1 to {p_kill::%attacker%}
			# 	add 1 to {p_death::%victim%}
			# 	if projectile is set:
			# 		set {_msg} to new text component of "&8[&f☠&8] &7%victim's display name% &7was shot by %attacker's display name% using "
			# 	else:
			# 		set {_msg} to new text component of "&8[&f☠&8] &7%victim's display name% &7was killed by %attacker's display name% using "
			# 	set {_weapon} to new text component of "&8[&f%name of tool of attacker%&8]"
			# 	set {_info} to tool of attacker
			# 	set hover event of {_weapon} to a new hover event showing {_info}
			# 	loop all players:
			# 		send components {_msg} and {_weapon} to loop-player


# on damage:

# 	if attacker is player:
# 		victim is player
# 		cancel event

# 	set damage to 0
# 	if {dead.%victim%} is set:
# 		cancel event
# 		stop
# 	if attacker is a player:
# 		victim is a player
# 		{pvp::%victim%} is set
# 		cancel event
# 		send action bar "{@prefix} &7PvP is {@color}&lDISABLED &7 for %victim%" to attacker
# 		stop
# 	if attacker is set:
# 		attacker is a player
# 		victim is a player
# 		{pvp::%attacker%} is set
# 		cancel event
# 		send action bar "{@prefix} &7Your PvP is {@color}&lDISABLED" to attacker
# 		stop

on join:
	if {dead.%player%} is set:
		delete {dead.%player%}

every 3 seconds:
	loop all players:
		if {p_defense::%loop-player%} is less than {p_maxdefense::%loop-player%}:
			{dead.%loop-player%} is not set
			add 1 to {p_defense::%loop-player%}