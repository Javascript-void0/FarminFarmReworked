options:
	color: <##B4C788>
	prefix: &8[<##B4C788>&lUMORIA&8]&r
	permission: &7Insufficient Permissions
	admin: &8[<##B4C788>&lADMIN&8]&r
	world: world

function death(p: player):
	set {dead.%{_p}%} to true
	# apply blindness of tier 255 to {_p} for 3 seconds
	# apply weakness of tier 255 to {_p} for 3 seconds
	# apply slowness of tier 255 to {_p} for 3 seconds
	# set {_p}'s flight mode to true
	# apply wither of tier 255 to {_p} for 3 seconds
	send title "{@color}&lYOU DIED" with subtitle "&7{@color}-50%% &7coins &8| {@color}Invincible &7for 10s" to {_p} for 2 seconds
	set {_half} to floor({p_coins::%{_p}%} / 2)
	remove {_half} from {p_coins::%{_p}%}
	set {p_health::%{_p}%} to {p_maxhealth::%{_p}%}
	set {p_defense::%{_p}%} to {p_maxdefense::%{_p}%}
	wait 10 second
	delete {dead.%{_p}%}
	send title "{@color}" with subtitle "&7You are no longer invincible" to {_p} for 2 seconds
	# set {_p}'s flight mode to false

function deathEffect(e: entity):
	show 30 critical hit at location of {_e}

function counter(l: location, t: text):
	set {_ll} to random element out of blocks in radius 1 of {_l}
	add 3 to {_ll}'s y-coordinate
	create holo object "%{_t}%" with id "damage.%{_ll}%" at {_ll}
	wait 1 second
	delete holo object "damage.%{_ll}%"

function expItem(p: player, i: integer, n: number):
	set {_level::*} to uncoloured line 2 of lore of (slot {_i} of {_p}) parsed as " ┃ %text%: %number%"
	set {_exp::*} to uncoloured line 3 of lore of (slot {_i} of {_p}) parsed as " ╹ %text%: %number%/%number%"
	
	set {_level} to {_level::2}
	set {_exp} to {_exp::2}
	set {_nextexp} to {_exp::3}
	set {_exp} to {_exp} + {_n}
	if {_exp} is greater or equal to {_nextexp}:
		set {_before} to {_level}
		set {_exp} to {_exp} - {_nextexp}
		if {_exp} is less than 0:
			set {_exp} to 0
		set {_nextexp} to ({_level} * 2) + 10
		add 1 to {_level}
		if {_i} is less than 10:
			chatlog({_p}, "weapon levelup", "%{_level}%")
		else if {_i} is 40:
			chatlog({_p}, "shield levelup", "%{_level}%")
		else if {_i} is 36:
			chatlog({_p}, "armor levelup", "%{_level}%")
		if {_exp} is greater than {_nextexp}:
			expItem({_p}, {_i}, 0)
	set line 2 of lore of (slot {_i} of {_p}) to " &8┃ &7Level: &f%{_level}%"					
	set line 3 of lore of (slot {_i} of {_p}) to " &8╹ &7Exp: &f%{_exp}%&7/&f%{_nextexp}%"					

	set {_percent} to {_exp} / {_nextexp}
	set {_percentFormat} to roundto({_percent} * 100, 1)
	set {_bar} to itemExpBar({_percent})

	set line 5 of lore of (slot {_i} of {_p}) to "   &8(&f%{_percentFormat}%%%&8)"
	set line 6 of lore of (slot {_i} of {_p}) to "%{_bar}%"

on damage:

	if attacker is not a player:
		victim is not a player
		cancel event
		stop

# =================================== PLAYER HIT MOB ==================================

	if attacker is player:
		victim is not a player
		set damage to 0
		if held item of attacker is bow:
			if projectile does not exist:
				set {_typeModify} to floor({p_damage::%attacker%} * 0.1)
			else:
				set {_typeModify} to {p_damage::%attacker%}
				level of power of attacker's tool is greater than 0
				set {_enchant} to (level of power of attacker's tool - 1) * 5
		else if held item of attacker is sword:
			set {_typeModify} to {p_damage::%attacker%}
			level of sharpness of attacker's tool is greater than 0
			set {_enchant} to (level of sharpness of attacker's tool - 1) * 5
		else if held item of attacker is pickaxe:
			set {_typeModify} to floor({p_damage::%attacker%} * 0.1)
		else if held item of attacker is hoe:
			set {_typeModify} to floor({p_damage::%attacker%} * 0.05)
		else:
			set {_typeModify} to {p_damage::%attacker%}
		remove ({_typeModify} + {_enchant}) from {%victim%::health}

		# ========= CALCULATE EXP =========

		set {_mending} to level of mending of attacker's tool
		if {_mending} is not set:
			set {_mending} to 1
		set {_exp} to {_mending} * 3
		set {_itemexp} to {_mending} * 1

		# ========= MOB KILL ==========

		if {%victim%::health} is less than 1:
			attacker is a player
			deathEffect(victim)
			delete victim
			add 1 to {p_kill::%attacker%}
			add 1 to {dungeon::%attacker%::runkill}
			delete {%victim%::*}
			if attacker's held item is sword, bow, pickaxe or hoe:
				set {_hotbar::*} to 0, 1, 2, 3, 4, 5, 6, 7, and 8
				loop {_hotbar::*}:
					if 1 of slot loop-value of attacker is 1 of held item of attacker:
						set {_slot} to loop-value
						exit loop
			expItem(attacker, {_slot}, {_itemexp})
			coins("add", attacker, 1)
			add 1 to {p_coins::%attacker%}
			expPlayer(attacker, {_exp})

			# ======== MOB DROPS =======

			if victim is zombie:
				orcDrop(location of victim, level of looting of attacker's tool)
			else if victim is a skeleton:
				boneDrop(location of victim, level of looting of attacker's tool)
			else if victim is husk:
				elfDrop(location of victim, level of looting of attacker's tool)
			else if victim is stray:
				spiritDrop(location of victim, level of looting of attacker's tool)

			# ========== DUNGEON MOB COUNT ==============

			if {dungeon::%attacker%::mobRemain} is greater than 0:
				remove 1 from {dungeon::%attacker%::mobRemain}
				set {mobcapnum} to {mobcapnum} - 1

		# ======= NO KILL, JUST DAMAGE ==============

		else:
			set {_name::*} to name of victim split at " "
			set name of victim to "%{_name::1}% %{_name::2}% &7({@color}%{%victim%::health}%{@color}/%{%victim%::maxhealth}% ❤&7)"
		if {_enchant} is greater than 1:
			counter(location of victim, "&7-%{_enchant}%")
		counter(location of victim, "{@color}-%{_typeModify}%")

# =================================== MOB ATTACK PLAYER ==========================

	else if attacker is not a player:
		victim is a player

		if victim is blocking with a shield:
			cancel event
			set {_shield} to slot 40 of victim

			# === SHIELD EXP ===
			set {_exp} to level of mending of {_shield}
			if {_exp} is not set:
				set {_exp} to 1

			set slot 40 of victim to air
			set {_cooldown} to level of protection of {_shield}
			set {_cooldown} to 1 - ({_cooldown} / 4)
			if {_cooldown} is less than 0.3:
				set {_cooldown} to 0.3
			wait "%{_cooldown}% seconds" parsed as timespan
			set slot 40 of victim to {_shield}
			expItem(victim, 40, {_exp})
		# else if damage was caused by thorns:
		# 	cancel event
		# 	stop

		else if {p_defense::%victim%} is greater than 0:
			remove 1 from {p_defense::%victim%}
			stop

		# ========= GET ARMOR RESISTANCE =========

		else:

			set {_slots::*} to 36, 37, 38, and 39
			set {_itemexp} to 1
			set {_totalReduction} to 0
			loop {_slots::*}:
				set {_item} to slot loop-value of victim
				set {_unbreaking} to (level of unbreaking of {_item}) - 1
				if {_unbreaking} is less than 0:
					set {_unbreaking} to 0
				set {_totalReduction} to {_totalReduction} + {_unbreaking} 

				# ========= GET ARMOR EXP =========

				set {_mending} to (level of mending of {_item}) - 1
				if {_mending} is less than 0:
					set {_mending} to 0
				set {_itemexp} to {_itemexp} + ({_mending} * 1)

			# ========= FINAL =========

			remove ({%attacker%::damage} - {_totalReduction}) from {p_health::%victim%}
			counter(location of victim, "&c-%{%attacker%::damage}% &8[&7%{_totalReduction}%&8]")
			expItem(victim, 36, {_itemexp})
			expItem(victim, 37, {_itemexp})
			expItem(victim, 38, {_itemexp})
			expItem(victim, 39, {_itemexp})

			# ========= PLAYER DEATH =============

			if {p_health::%victim%} is less than 1:
				# death(victim)
				cancel event
				# if attacker is not a player:
				# 	victim is player
				# 	if projectile is set:
				# 		broadcast "&8[&f☠&8] &7%victim's display name% &7was shot by %attacker's display name%"
				# 	else:
				# 		broadcast "&8[&f☠&8] &7%victim's display name% &7was killed by %attacker's display name%"
				add 1 to {p_death::%victim%}

				set {p_health::%victim%} to {p_maxhealth::%victim%}
				set {p_defense::%victim%} to {p_maxdefense::%victim%}

				# ========= CALCULATE REWARDS =========

				set {_wrath} to ({dungeon::%victim%::runroom} * 3) + ({dungeon::%victim%::floor} * 10)
				wrath("add", victim, {_wrath})
				set {_before} to {p_level::%victim%}
				set {_exp} to {dungeon::%victim%::runkill} * 5
				if {dungeon::%victim%::floor} is greater than {p_highestfloor::%victim%}:
					set {p_highestfloor::%victim%} to {dungeon::%victim%::floor}
					set {_best} to "{@color}New Best! &fx2 Exp"
					set {_exp} to {_exp} * 2
				else:
					set {_best} to "&7Floor &f%{p_highestfloor::%victim%}%"
				expPlayer(victim, {_exp})
				set {_after} to {p_level::%victim%}
				if {_after} is greater than {_before}:
					set {_levelup} to true

				# ========= SUMMARY =========

				send " " to victim
				send " &7&l------- {@color}&lSUMMARY &7&l-------" to victim
				send " " to victim
				send "   &7Final: &7Floor &f%{dungeon::%victim%::floor}%" to victim
				send "   &7Final: &7Room &f%{dungeon::%victim%::room}%" to victim
				send "   &7Best: %{_best}%" to victim
				send "   &7Total: &f%{dungeon::%victim%::runroom}% &7rooms" to victim
				send "   &7Total: &f%{dungeon::%victim%::runkill}% &7kills" to victim
				send " " to victim
				send "      &7===== {@color}&lREWARDS &7=====" to victim
				send " " to victim
				send "   &7Wrath: &f+%{_wrath}%" to victim
				if {_best} contains "New Best":
					send "   &7Exp: &f+%{_exp} / 2% &7x &f2 &7= {@color}%{_exp} * 2% {@color}Exp" to victim
				else:
					send "   &7Exp: &f+%{_exp}%" to victim
				send "   &7Upgrade Pts: &f+0" to victim
				send " " to victim
				send "   &8[&c☠&8] &cYou Died! " to victim
				if {_levelup} is true:
					send "   &7You gained &f%{_exp}% &7Exp and leveled up to &fLevel %{p_level::%victim%}%" to victim
				else:
					send "   &7You gained &f%{_exp}% Exp" to victim
				send " " to victim
				send " &7&l----------------------- " to victim
				send " " to victim

				dungeonEnd(victim)
				teleport victim to {spawn}

on damage:
	attacker is not a player
	victim is a player
	set damage to 0